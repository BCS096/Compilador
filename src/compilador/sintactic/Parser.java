
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compilador.sintactic;

import java.io.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import compilador.main.MVP;
import compilador.sintactic.nodes.*;
import tablas.IdDescripcion.TipoDescripcion;
import types.*;
import compilador.lexic.LiteralWrapper;
import compilador.sintactic.semantic.analisisSemantico;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\154\000\002\002\004\000\002\002\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\002\000\002\004\004" +
    "\000\002\005\003\000\002\005\002\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\007\004\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\011\005\000\002\011\003\000\002\012\003" +
    "\000\002\012\005\000\002\013\006\000\002\014\006\000" +
    "\002\014\005\000\002\015\003\000\002\016\006\000\002" +
    "\017\010\000\002\020\003\000\002\021\010\000\002\024" +
    "\004\000\002\024\002\000\002\025\003\000\002\025\003" +
    "\000\002\026\012\000\002\027\017\000\002\030\003\000" +
    "\002\030\002\000\002\031\003\000\002\031\005\000\002" +
    "\032\004\000\002\033\004\000\002\033\002\000\002\034" +
    "\012\000\002\034\011\000\002\034\004\000\002\034\004" +
    "\000\002\034\015\000\002\034\012\000\002\034\003\000" +
    "\002\035\004\000\002\035\004\000\002\035\005\000\002" +
    "\036\006\000\002\036\012\000\002\036\002\000\002\037" +
    "\003\000\002\037\003\000\002\037\006\000\002\037\006" +
    "\000\002\040\004\000\002\040\004\000\002\040\003\000" +
    "\002\040\005\000\002\041\006\000\002\042\005\000\002" +
    "\042\003\000\002\042\002\000\002\043\005\000\002\044" +
    "\005\000\002\044\004\000\002\044\005\000\002\044\003" +
    "\000\002\045\003\000\002\045\003\000\002\045\004\000" +
    "\002\045\003\000\002\046\004\000\002\047\003\000\002" +
    "\047\003\000\002\047\002\000\002\022\006\000\002\022" +
    "\005\000\002\023\004\000\002\050\003\000\002\050\003" +
    "\000\002\050\003\000\002\050\003\000\002\050\003\000" +
    "\002\051\003\000\002\051\003\000\002\051\003\000\002" +
    "\052\003\000\002\052\003\000\002\052\003\000\002\052" +
    "\003\000\002\052\003\000\002\052\003\000\002\053\003" +
    "\000\002\053\003\000\002\054\003\000\002\054\003\000" +
    "\002\054\003\000\002\054\003\000\002\054\003\000\002" +
    "\055\003\000\002\056\003\000\002\056\003\000\002\057" +
    "\010\000\002\060\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\341\000\026\033\ufffd\034\ufffd\037\ufffd\040\ufffd\045" +
    "\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\001\002" +
    "\000\026\033\ufffa\034\ufffa\037\011\040\012\045\ufffa\046" +
    "\ufffa\047\ufffa\050\ufffa\051\010\052\uffe4\001\002\000\004" +
    "\002\006\001\002\000\004\002\001\001\002\000\010\037" +
    "\uffe2\040\uffe2\052\uffe2\001\002\000\016\033\ufffb\034\ufffb" +
    "\045\ufffb\046\ufffb\047\ufffb\050\ufffb\001\002\000\004\067" +
    "\037\001\002\000\004\067\037\001\002\000\004\052\203" +
    "\001\002\000\010\037\uffe3\040\uffe3\052\uffe3\001\002\000" +
    "\016\033\027\034\034\045\033\046\032\047\035\050\030" +
    "\001\002\000\006\003\021\013\022\001\002\000\010\037" +
    "\011\040\012\052\uffe4\001\002\000\004\052\uffe5\001\002" +
    "\000\026\033\ufffe\034\ufffe\037\ufffe\040\ufffe\045\ufffe\046" +
    "\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe\001\002\000\026" +
    "\033\uffff\034\uffff\037\uffff\040\uffff\045\uffff\046\uffff\047" +
    "\uffff\050\uffff\051\uffff\052\uffff\001\002\000\004\067\037" +
    "\001\002\000\006\003\ufff8\013\ufff8\001\002\000\006\003" +
    "\ufffc\013\ufffc\001\002\000\006\003\ufff9\013\ufff9\001\002" +
    "\000\012\045\033\046\032\047\035\050\030\001\002\000" +
    "\010\021\ufff2\023\ufff2\067\ufff2\001\002\000\006\003\ufff7" +
    "\013\ufff7\001\002\000\010\021\ufff4\023\ufff4\067\ufff4\001" +
    "\002\000\010\021\ufff5\023\ufff5\067\ufff5\001\002\000\004" +
    "\067\037\001\002\000\010\021\ufff3\023\ufff3\067\ufff3\001" +
    "\002\000\004\017\040\001\002\000\062\003\uff96\004\uff96" +
    "\005\uff96\006\uff96\007\uff96\010\uff96\011\uff96\012\uff96\013" +
    "\uff96\014\uff96\016\uff96\017\uff96\020\uff96\023\uff96\024\uff96" +
    "\044\uff96\053\uff96\054\uff96\055\uff96\056\uff96\057\uff96\060" +
    "\uff96\061\uff96\062\uff96\001\002\000\014\020\uffde\045\033" +
    "\046\032\047\035\050\030\001\002\000\004\020\uffdf\001" +
    "\002\000\004\067\037\001\002\000\004\020\047\001\002" +
    "\000\006\014\045\020\uffdd\001\002\000\012\045\033\046" +
    "\032\047\035\050\030\001\002\000\004\020\uffdc\001\002" +
    "\000\004\044\051\001\002\000\006\003\uffe7\013\uffe7\001" +
    "\002\000\004\032\053\001\002\000\006\003\uffe8\013\uffe8" +
    "\001\002\000\004\034\054\001\002\000\004\017\055\001" +
    "\002\000\034\005\060\011\075\012\067\017\101\020\uffc0" +
    "\042\072\043\076\063\073\066\064\067\037\070\077\071" +
    "\074\072\062\001\002\000\004\067\037\001\002\000\046" +
    "\003\uffb9\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\013" +
    "\uffb9\014\uffb9\020\uffb9\024\uffb9\053\uffb9\054\uffb9\055\uffb9" +
    "\056\uffb9\057\uffb9\060\uffb9\061\uffb9\062\uffb9\001\002\000" +
    "\026\005\060\011\075\012\067\042\072\043\076\066\064" +
    "\067\037\070\077\071\074\072\062\001\002\000\032\005" +
    "\060\011\075\012\067\017\101\042\072\043\076\063\073" +
    "\066\064\067\037\070\077\071\074\072\062\001\002\000" +
    "\046\003\uffab\004\uffab\005\uffab\006\uffab\007\uffab\010\uffab" +
    "\013\uffab\014\uffab\020\uffab\024\uffab\053\uffab\054\uffab\055" +
    "\uffab\056\uffab\057\uffab\060\uffab\061\uffab\062\uffab\001\002" +
    "\000\046\003\uffba\004\uffba\005\uffba\006\uffba\007\uffba\010" +
    "\uffba\013\uffba\014\uffba\020\uffba\024\uffba\053\uffba\054\uffba" +
    "\055\uffba\056\uffba\057\uffba\060\uffba\061\uffba\062\uffba\001" +
    "\002\000\004\017\147\001\002\000\062\003\uffb3\004\uffb3" +
    "\005\uffb3\006\uffb3\007\uffb3\010\uffb3\011\075\012\067\013" +
    "\uffb3\014\uffb3\016\136\017\137\020\uffb3\023\140\024\uffb3" +
    "\044\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3\060" +
    "\uffb3\061\uffb3\062\uffb3\001\002\000\040\004\112\005\107" +
    "\006\120\007\111\010\122\014\130\020\uffc1\053\125\054" +
    "\105\055\110\056\117\057\115\060\123\061\124\062\113" +
    "\001\002\000\050\003\uff98\004\uff98\005\uff98\006\uff98\007" +
    "\uff98\010\uff98\013\uff98\014\uff98\020\uff98\024\uff98\053\uff98" +
    "\054\uff98\055\uff98\056\uff98\057\uff98\060\uff98\061\uff98\062" +
    "\uff98\067\uff98\001\002\000\004\020\127\001\002\000\046" +
    "\003\uffc5\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5\013" +
    "\uffc5\014\uffc5\020\uffc5\024\uffc5\053\uffc5\054\uffc5\055\uffc5" +
    "\056\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5\001\002\000" +
    "\046\003\uffad\004\uffad\005\uffad\006\uffad\007\uffad\010\uffad" +
    "\013\uffad\014\uffad\020\uffad\024\uffad\053\uffad\054\uffad\055" +
    "\uffad\056\uffad\057\uffad\060\uffad\061\uffad\062\uffad\001\002" +
    "\000\032\005\uff9a\011\uff9a\012\uff9a\017\uff9a\042\uff9a\043" +
    "\uff9a\063\uff9a\066\uff9a\067\uff9a\070\uff9a\071\uff9a\072\uff9a" +
    "\001\002\000\046\003\uffae\004\uffae\005\uffae\006\uffae\007" +
    "\uffae\010\uffae\013\uffae\014\uffae\020\uffae\024\uffae\053\uffae" +
    "\054\uffae\055\uffae\056\uffae\057\uffae\060\uffae\061\uffae\062" +
    "\uffae\001\002\000\050\003\uff99\004\uff99\005\uff99\006\uff99" +
    "\007\uff99\010\uff99\013\uff99\014\uff99\020\uff99\024\uff99\053" +
    "\uff99\054\uff99\055\uff99\056\uff99\057\uff99\060\uff99\061\uff99" +
    "\062\uff99\067\uff99\001\002\000\046\003\uffac\004\uffac\005" +
    "\uffac\006\uffac\007\uffac\010\uffac\013\uffac\014\uffac\020\uffac" +
    "\024\uffac\053\uffac\054\uffac\055\uffac\056\uffac\057\uffac\060" +
    "\uffac\061\uffac\062\uffac\001\002\000\046\003\uffaf\004\uffaf" +
    "\005\uffaf\006\uffaf\007\uffaf\010\uffaf\013\uffaf\014\uffaf\020" +
    "\uffaf\024\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf" +
    "\060\uffaf\061\uffaf\062\uffaf\001\002\000\046\003\uffb7\004" +
    "\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7\013\uffb7\014\uffb7" +
    "\020\uffb7\024\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7\057" +
    "\uffb7\060\uffb7\061\uffb7\062\uffb7\001\002\000\032\005\060" +
    "\011\075\012\067\017\101\042\072\043\076\063\073\066" +
    "\064\067\037\070\077\071\074\072\062\001\002\000\046" +
    "\003\uffbb\004\uffbb\005\uffbb\006\uffbb\007\uffbb\010\uffbb\013" +
    "\uffbb\014\uffbb\020\uffbb\024\uffbb\053\uffbb\054\uffbb\055\uffbb" +
    "\056\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb\001\002\000" +
    "\036\004\112\005\107\006\120\007\111\010\122\020\121" +
    "\053\125\054\105\055\110\056\117\057\115\060\123\061" +
    "\124\062\113\001\002\000\032\005\uffaa\011\uffaa\012\uffaa" +
    "\017\uffaa\042\uffaa\043\uffaa\063\uffaa\066\uffaa\067\uffaa\070" +
    "\uffaa\071\uffaa\072\uffaa\001\002\000\032\005\uffa6\011\uffa6" +
    "\012\uffa6\017\uffa6\042\uffa6\043\uffa6\063\uffa6\066\uffa6\067" +
    "\uffa6\070\uffa6\071\uffa6\072\uffa6\001\002\000\032\005\uffa8" +
    "\011\uffa8\012\uffa8\017\uffa8\042\uffa8\043\uffa8\063\uffa8\066" +
    "\uffa8\067\uffa8\070\uffa8\071\uffa8\072\uffa8\001\002\000\032" +
    "\005\uff9e\011\uff9e\012\uff9e\017\uff9e\042\uff9e\043\uff9e\063" +
    "\uff9e\066\uff9e\067\uff9e\070\uff9e\071\uff9e\072\uff9e\001\002" +
    "\000\032\005\uffa5\011\uffa5\012\uffa5\017\uffa5\042\uffa5\043" +
    "\uffa5\063\uffa5\066\uffa5\067\uffa5\070\uffa5\071\uffa5\072\uffa5" +
    "\001\002\000\032\005\uff9c\011\uff9c\012\uff9c\017\uff9c\042" +
    "\uff9c\043\uff9c\063\uff9c\066\uff9c\067\uff9c\070\uff9c\071\uff9c" +
    "\072\uff9c\001\002\000\032\005\uff9f\011\uff9f\012\uff9f\017" +
    "\uff9f\042\uff9f\043\uff9f\063\uff9f\066\uff9f\067\uff9f\070\uff9f" +
    "\071\uff9f\072\uff9f\001\002\000\032\005\uffa0\011\uffa0\012" +
    "\uffa0\017\uffa0\042\uffa0\043\uffa0\063\uffa0\066\uffa0\067\uffa0" +
    "\070\uffa0\071\uffa0\072\uffa0\001\002\000\032\005\060\011" +
    "\075\012\067\017\101\042\072\043\076\063\073\066\064" +
    "\067\037\070\077\071\074\072\062\001\002\000\032\005" +
    "\uffa4\011\uffa4\012\uffa4\017\uffa4\042\uffa4\043\uffa4\063\uffa4" +
    "\066\uffa4\067\uffa4\070\uffa4\071\uffa4\072\uffa4\001\002\000" +
    "\032\005\uffa9\011\uffa9\012\uffa9\017\uffa9\042\uffa9\043\uffa9" +
    "\063\uffa9\066\uffa9\067\uffa9\070\uffa9\071\uffa9\072\uffa9\001" +
    "\002\000\032\005\uffa3\011\uffa3\012\uffa3\017\uffa3\042\uffa3" +
    "\043\uffa3\063\uffa3\066\uffa3\067\uffa3\070\uffa3\071\uffa3\072" +
    "\uffa3\001\002\000\032\005\uff9d\011\uff9d\012\uff9d\017\uff9d" +
    "\042\uff9d\043\uff9d\063\uff9d\066\uff9d\067\uff9d\070\uff9d\071" +
    "\uff9d\072\uff9d\001\002\000\046\003\uffbe\004\uffbe\005\uffbe" +
    "\006\uffbe\007\uffbe\010\uffbe\013\uffbe\014\uffbe\020\uffbe\024" +
    "\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe" +
    "\061\uffbe\062\uffbe\001\002\000\032\005\uff9b\011\uff9b\012" +
    "\uff9b\017\uff9b\042\uff9b\043\uff9b\063\uff9b\066\uff9b\067\uff9b" +
    "\070\uff9b\071\uff9b\072\uff9b\001\002\000\032\005\uffa2\011" +
    "\uffa2\012\uffa2\017\uffa2\042\uffa2\043\uffa2\063\uffa2\066\uffa2" +
    "\067\uffa2\070\uffa2\071\uffa2\072\uffa2\001\002\000\032\005" +
    "\uffa1\011\uffa1\012\uffa1\017\uffa1\042\uffa1\043\uffa1\063\uffa1" +
    "\066\uffa1\067\uffa1\070\uffa1\071\uffa1\072\uffa1\001\002\000" +
    "\032\005\uffa7\011\uffa7\012\uffa7\017\uffa7\042\uffa7\043\uffa7" +
    "\063\uffa7\066\uffa7\067\uffa7\070\uffa7\071\uffa7\072\uffa7\001" +
    "\002\000\046\003\uffbc\004\112\005\107\006\120\007\111" +
    "\010\122\013\uffbc\014\uffbc\020\uffbc\024\uffbc\053\125\054" +
    "\105\055\110\056\117\057\115\060\123\061\124\062\113" +
    "\001\002\000\006\003\uffe6\013\uffe6\001\002\000\034\005" +
    "\060\011\075\012\067\017\101\020\uffc0\042\072\043\076" +
    "\063\073\066\064\067\037\070\077\071\074\072\062\001" +
    "\002\000\004\020\uffc2\001\002\000\050\003\uffb5\004\uffb5" +
    "\005\uffb5\006\uffb5\007\uffb5\010\uffb5\013\uffb5\014\uffb5\020" +
    "\uffb5\024\uffb5\044\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5" +
    "\057\uffb5\060\uffb5\061\uffb5\062\uffb5\001\002\000\050\003" +
    "\uffb6\004\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6\013\uffb6" +
    "\014\uffb6\020\uffb6\024\uffb6\044\uffb6\053\uffb6\054\uffb6\055" +
    "\uffb6\056\uffb6\057\uffb6\060\uffb6\061\uffb6\062\uffb6\001\002" +
    "\000\046\003\uffc6\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010" +
    "\uffc6\013\uffc6\014\uffc6\020\uffc6\024\uffc6\053\uffc6\054\uffc6" +
    "\055\uffc6\056\uffc6\057\uffc6\060\uffc6\061\uffc6\062\uffc6\001" +
    "\002\000\050\003\uffb4\004\uffb4\005\uffb4\006\uffb4\007\uffb4" +
    "\010\uffb4\013\uffb4\014\uffb4\020\uffb4\024\uffb4\044\uffb4\053" +
    "\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4" +
    "\062\uffb4\001\002\000\004\067\037\001\002\000\034\005" +
    "\060\011\075\012\067\017\101\020\uffc0\042\072\043\076" +
    "\063\073\066\064\067\037\070\077\071\074\072\062\001" +
    "\002\000\032\005\060\011\075\012\067\017\101\042\072" +
    "\043\076\063\073\066\064\067\037\070\077\071\074\072" +
    "\062\001\002\000\036\004\112\005\107\006\120\007\111" +
    "\010\122\024\142\053\125\054\105\055\110\056\117\057" +
    "\115\060\123\061\124\062\113\001\002\000\052\003\uffb1" +
    "\004\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1\013\uffb1\014" +
    "\uffb1\020\uffb1\023\140\024\uffb1\044\uffb1\053\uffb1\054\uffb1" +
    "\055\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1\001" +
    "\002\000\050\003\uffb2\004\uffb2\005\uffb2\006\uffb2\007\uffb2" +
    "\010\uffb2\013\uffb2\014\uffb2\020\uffb2\024\uffb2\044\uffb2\053" +
    "\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2" +
    "\062\uffb2\001\002\000\004\020\145\001\002\000\046\003" +
    "\uffc3\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\013\uffc3" +
    "\014\uffc3\020\uffc3\024\uffc3\053\uffc3\054\uffc3\055\uffc3\056" +
    "\uffc3\057\uffc3\060\uffc3\061\uffc3\062\uffc3\001\002\000\050" +
    "\003\uffb0\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0\013" +
    "\uffb0\014\uffb0\020\uffb0\024\uffb0\044\uffb0\053\uffb0\054\uffb0" +
    "\055\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\001" +
    "\002\000\004\020\150\001\002\000\046\003\uffc4\004\uffc4" +
    "\005\uffc4\006\uffc4\007\uffc4\010\uffc4\013\uffc4\014\uffc4\020" +
    "\uffc4\024\uffc4\053\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4" +
    "\060\uffc4\061\uffc4\062\uffc4\001\002\000\046\003\uffbd\004" +
    "\112\005\107\006\120\007\111\010\122\013\uffbd\014\uffbd" +
    "\020\uffbd\024\uffbd\053\125\054\105\055\110\056\117\057" +
    "\115\060\123\061\124\062\113\001\002\000\046\003\uffb8" +
    "\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\013\uffb8\014" +
    "\uffb8\020\uffb8\024\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8" +
    "\057\uffb8\060\uffb8\061\uffb8\062\uffb8\001\002\000\046\003" +
    "\uffc7\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\013\uffc7" +
    "\014\uffc7\020\uffc7\024\uffc7\053\uffc7\054\uffc7\055\uffc7\056" +
    "\uffc7\057\uffc7\060\uffc7\061\uffc7\062\uffc7\001\002\000\006" +
    "\014\uffdb\020\uffdb\001\002\000\004\067\037\001\002\000" +
    "\004\044\161\001\002\000\006\003\uffea\013\uffea\001\002" +
    "\000\006\003\uffed\013\uffed\001\002\000\004\032\162\001" +
    "\002\000\012\045\033\046\032\047\035\050\030\001\002" +
    "\000\004\023\165\001\002\000\010\003\uffe9\013\uffe9\023" +
    "\170\001\002\000\032\005\060\011\075\012\067\017\101" +
    "\042\072\043\076\063\073\066\064\067\037\070\077\071" +
    "\074\072\062\001\002\000\036\004\112\005\107\006\120" +
    "\007\111\010\122\024\167\053\125\054\105\055\110\056" +
    "\117\057\115\060\123\061\124\062\113\001\002\000\010" +
    "\003\uffeb\013\uffeb\023\uffeb\001\002\000\032\005\060\011" +
    "\075\012\067\017\101\042\072\043\076\063\073\066\064" +
    "\067\037\070\077\071\074\072\062\001\002\000\036\004" +
    "\112\005\107\006\120\007\111\010\122\024\172\053\125" +
    "\054\105\055\110\056\117\057\115\060\123\061\124\062" +
    "\113\001\002\000\010\003\uffec\013\uffec\023\uffec\001\002" +
    "\000\012\003\uffef\013\uffef\014\uffef\044\200\001\002\000" +
    "\010\003\ufff0\013\ufff0\014\ufff0\001\002\000\010\003\ufff6" +
    "\013\ufff6\014\176\001\002\000\004\067\037\001\002\000" +
    "\010\003\ufff1\013\ufff1\014\ufff1\001\002\000\032\005\060" +
    "\011\075\012\067\017\101\042\072\043\076\063\073\066" +
    "\064\067\037\070\077\071\074\072\062\001\002\000\042" +
    "\003\uffee\004\112\005\107\006\120\007\111\010\122\013" +
    "\uffee\014\uffee\053\125\054\105\055\110\056\117\057\115" +
    "\060\123\061\124\062\113\001\002\000\004\002\000\001" +
    "\002\000\004\017\204\001\002\000\004\020\205\001\002" +
    "\000\004\021\206\001\002\000\050\003\221\011\075\012" +
    "\067\022\uffd9\025\210\030\216\031\214\033\ufffa\034\ufffa" +
    "\035\212\045\ufffa\046\ufffa\047\ufffa\050\ufffa\051\010\064" +
    "\223\065\215\066\064\067\037\001\002\000\052\003\221" +
    "\011\075\012\067\022\uffd9\025\210\030\216\031\214\033" +
    "\ufffa\034\ufffa\035\212\041\uffd9\045\ufffa\046\ufffa\047\ufffa" +
    "\050\ufffa\051\010\064\223\065\215\066\064\067\037\001" +
    "\002\000\004\017\275\001\002\000\004\044\273\001\002" +
    "\000\004\021\264\001\002\000\004\022\263\001\002\000" +
    "\004\017\243\001\002\000\004\017\240\001\002\000\004" +
    "\017\232\001\002\000\004\013\231\001\002\000\004\013" +
    "\230\001\002\000\052\003\uffd2\011\uffd2\012\uffd2\022\uffd2" +
    "\025\uffd2\030\uffd2\031\uffd2\033\uffd2\034\uffd2\035\uffd2\041" +
    "\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2\064\uffd2" +
    "\065\uffd2\066\uffd2\067\uffd2\001\002\000\004\013\uffca\001" +
    "\002\000\004\017\225\001\002\000\004\013\uffcb\001\002" +
    "\000\032\005\060\011\075\012\067\017\101\042\072\043" +
    "\076\063\073\066\064\067\037\070\077\071\074\072\062" +
    "\001\002\000\036\004\112\005\107\006\120\007\111\010" +
    "\122\020\227\053\125\054\105\055\110\056\117\057\115" +
    "\060\123\061\124\062\113\001\002\000\004\013\uffc9\001" +
    "\002\000\052\003\uffd6\011\uffd6\012\uffd6\022\uffd6\025\uffd6" +
    "\030\uffd6\031\uffd6\033\uffd6\034\uffd6\035\uffd6\041\uffd6\045" +
    "\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\064\uffd6\065\uffd6" +
    "\066\uffd6\067\uffd6\001\002\000\052\003\uffd5\011\uffd5\012" +
    "\uffd5\022\uffd5\025\uffd5\030\uffd5\031\uffd5\033\uffd5\034\uffd5" +
    "\035\uffd5\041\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\051" +
    "\uffd5\064\uffd5\065\uffd5\066\uffd5\067\uffd5\001\002\000\032" +
    "\005\060\011\075\012\067\017\101\042\072\043\076\063" +
    "\073\066\064\067\037\070\077\071\074\072\062\001\002" +
    "\000\036\004\112\005\107\006\120\007\111\010\122\020" +
    "\234\053\125\054\105\055\110\056\117\057\115\060\123" +
    "\061\124\062\113\001\002\000\004\021\235\001\002\000" +
    "\050\003\221\011\075\012\067\022\uffd9\025\210\030\216" +
    "\031\214\033\ufffa\034\ufffa\035\212\045\ufffa\046\ufffa\047" +
    "\ufffa\050\ufffa\051\010\064\223\065\215\066\064\067\037" +
    "\001\002\000\004\022\237\001\002\000\052\003\uffd7\011" +
    "\uffd7\012\uffd7\022\uffd7\025\uffd7\030\uffd7\031\uffd7\033\uffd7" +
    "\034\uffd7\035\uffd7\041\uffd7\045\uffd7\046\uffd7\047\uffd7\050" +
    "\uffd7\051\uffd7\064\uffd7\065\uffd7\066\uffd7\067\uffd7\001\002" +
    "\000\032\005\060\011\075\012\067\017\101\042\072\043" +
    "\076\063\073\066\064\067\037\070\077\071\074\072\062" +
    "\001\002\000\036\004\112\005\107\006\120\007\111\010" +
    "\122\020\242\053\125\054\105\055\110\056\117\057\115" +
    "\060\123\061\124\062\113\001\002\000\004\013\uffc8\001" +
    "\002\000\020\033\ufffa\034\ufffa\045\ufffa\046\ufffa\047\ufffa" +
    "\050\ufffa\051\010\001\002\000\004\013\245\001\002\000" +
    "\032\005\060\011\075\012\067\017\101\042\072\043\076" +
    "\063\073\066\064\067\037\070\077\071\074\072\062\001" +
    "\002\000\036\004\112\005\107\006\120\007\111\010\122" +
    "\013\247\053\125\054\105\055\110\056\117\057\115\060" +
    "\123\061\124\062\113\001\002\000\010\011\075\012\067" +
    "\067\037\001\002\000\010\011\075\012\067\044\260\001" +
    "\002\000\004\020\254\001\002\000\004\067\037\001\002" +
    "\000\004\020\uffd1\001\002\000\004\021\255\001\002\000" +
    "\050\003\221\011\075\012\067\022\uffd9\025\210\030\216" +
    "\031\214\033\ufffa\034\ufffa\035\212\045\ufffa\046\ufffa\047" +
    "\ufffa\050\ufffa\051\010\064\223\065\215\066\064\067\037" +
    "\001\002\000\004\022\257\001\002\000\052\003\uffd4\011" +
    "\uffd4\012\uffd4\022\uffd4\025\uffd4\030\uffd4\031\uffd4\033\uffd4" +
    "\034\uffd4\035\uffd4\041\uffd4\045\uffd4\046\uffd4\047\uffd4\050" +
    "\uffd4\051\uffd4\064\uffd4\065\uffd4\066\uffd4\067\uffd4\001\002" +
    "\000\032\005\060\011\075\012\067\017\101\042\072\043" +
    "\076\063\073\066\064\067\037\070\077\071\074\072\062" +
    "\001\002\000\004\020\uffd0\001\002\000\036\004\112\005" +
    "\107\006\120\007\111\010\122\020\uffcf\053\125\054\105" +
    "\055\110\056\117\057\115\060\123\061\124\062\113\001" +
    "\002\000\004\002\uff97\001\002\000\050\003\221\011\075" +
    "\012\067\022\uffd9\025\210\030\216\031\214\033\ufffa\034" +
    "\ufffa\035\212\045\ufffa\046\ufffa\047\ufffa\050\ufffa\051\010" +
    "\064\223\065\215\066\064\067\037\001\002\000\004\022" +
    "\266\001\002\000\004\036\267\001\002\000\004\017\270" +
    "\001\002\000\032\005\060\011\075\012\067\017\101\042" +
    "\072\043\076\063\073\066\064\067\037\070\077\071\074" +
    "\072\062\001\002\000\036\004\112\005\107\006\120\007" +
    "\111\010\122\020\272\053\125\054\105\055\110\056\117" +
    "\057\115\060\123\061\124\062\113\001\002\000\052\003" +
    "\uffd3\011\uffd3\012\uffd3\022\uffd3\025\uffd3\030\uffd3\031\uffd3" +
    "\033\uffd3\034\uffd3\035\uffd3\041\uffd3\045\uffd3\046\uffd3\047" +
    "\uffd3\050\uffd3\051\uffd3\064\uffd3\065\uffd3\066\uffd3\067\uffd3" +
    "\001\002\000\032\005\060\011\075\012\067\017\101\042" +
    "\072\043\076\063\073\066\064\067\037\070\077\071\074" +
    "\072\062\001\002\000\036\004\112\005\107\006\120\007" +
    "\111\010\122\013\uffbf\053\125\054\105\055\110\056\117" +
    "\057\115\060\123\061\124\062\113\001\002\000\032\005" +
    "\060\011\075\012\067\017\101\042\072\043\076\063\073" +
    "\066\064\067\037\070\077\071\074\072\062\001\002\000" +
    "\036\004\112\005\107\006\120\007\111\010\122\020\277" +
    "\053\125\054\105\055\110\056\117\057\115\060\123\061" +
    "\124\062\113\001\002\000\004\021\300\001\002\000\050" +
    "\003\221\011\075\012\067\022\uffd9\025\210\030\216\031" +
    "\214\033\ufffa\034\ufffa\035\212\045\ufffa\046\ufffa\047\ufffa" +
    "\050\ufffa\051\010\064\223\065\215\066\064\067\037\001" +
    "\002\000\004\022\302\001\002\000\056\003\uffcc\011\uffcc" +
    "\012\uffcc\022\uffcc\025\uffcc\026\304\027\305\030\uffcc\031" +
    "\uffcc\033\uffcc\034\uffcc\035\uffcc\041\uffcc\045\uffcc\046\uffcc" +
    "\047\uffcc\050\uffcc\051\uffcc\064\uffcc\065\uffcc\066\uffcc\067" +
    "\uffcc\001\002\000\052\003\uffd8\011\uffd8\012\uffd8\022\uffd8" +
    "\025\uffd8\030\uffd8\031\uffd8\033\uffd8\034\uffd8\035\uffd8\041" +
    "\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\064\uffd8" +
    "\065\uffd8\066\uffd8\067\uffd8\001\002\000\004\021\315\001" +
    "\002\000\004\017\306\001\002\000\032\005\060\011\075" +
    "\012\067\017\101\042\072\043\076\063\073\066\064\067" +
    "\037\070\077\071\074\072\062\001\002\000\036\004\112" +
    "\005\107\006\120\007\111\010\122\020\310\053\125\054" +
    "\105\055\110\056\117\057\115\060\123\061\124\062\113" +
    "\001\002\000\004\021\311\001\002\000\050\003\221\011" +
    "\075\012\067\022\uffd9\025\210\030\216\031\214\033\ufffa" +
    "\034\ufffa\035\212\045\ufffa\046\ufffa\047\ufffa\050\ufffa\051" +
    "\010\064\223\065\215\066\064\067\037\001\002\000\004" +
    "\022\313\001\002\000\056\003\uffcc\011\uffcc\012\uffcc\022" +
    "\uffcc\025\uffcc\026\304\027\305\030\uffcc\031\uffcc\033\uffcc" +
    "\034\uffcc\035\uffcc\041\uffcc\045\uffcc\046\uffcc\047\uffcc\050" +
    "\uffcc\051\uffcc\064\uffcc\065\uffcc\066\uffcc\067\uffcc\001\002" +
    "\000\052\003\uffcd\011\uffcd\012\uffcd\022\uffcd\025\uffcd\030" +
    "\uffcd\031\uffcd\033\uffcd\034\uffcd\035\uffcd\041\uffcd\045\uffcd" +
    "\046\uffcd\047\uffcd\050\uffcd\051\uffcd\064\uffcd\065\uffcd\066" +
    "\uffcd\067\uffcd\001\002\000\050\003\221\011\075\012\067" +
    "\022\uffd9\025\210\030\216\031\214\033\ufffa\034\ufffa\035" +
    "\212\045\ufffa\046\ufffa\047\ufffa\050\ufffa\051\010\064\223" +
    "\065\215\066\064\067\037\001\002\000\004\022\317\001" +
    "\002\000\052\003\uffce\011\uffce\012\uffce\022\uffce\025\uffce" +
    "\030\uffce\031\uffce\033\uffce\034\uffce\035\uffce\041\uffce\045" +
    "\uffce\046\uffce\047\uffce\050\uffce\051\uffce\064\uffce\065\uffce" +
    "\066\uffce\067\uffce\001\002\000\006\022\uffda\041\uffda\001" +
    "\002\000\004\017\322\001\002\000\014\020\uffde\045\033" +
    "\046\032\047\035\050\030\001\002\000\004\020\324\001" +
    "\002\000\004\015\325\001\002\000\012\045\033\046\032" +
    "\047\035\050\030\001\002\000\004\021\327\001\002\000" +
    "\050\003\221\011\075\012\067\025\210\030\216\031\214" +
    "\033\ufffa\034\ufffa\035\212\041\uffd9\045\ufffa\046\ufffa\047" +
    "\ufffa\050\ufffa\051\010\064\223\065\215\066\064\067\037" +
    "\001\002\000\004\041\331\001\002\000\032\005\060\011" +
    "\075\012\067\017\101\042\072\043\076\063\073\066\064" +
    "\067\037\070\077\071\074\072\062\001\002\000\036\004" +
    "\112\005\107\006\120\007\111\010\122\013\333\053\125" +
    "\054\105\055\110\056\117\057\115\060\123\061\124\062" +
    "\113\001\002\000\004\022\334\001\002\000\010\037\uffe0" +
    "\040\uffe0\052\uffe0\001\002\000\004\017\336\001\002\000" +
    "\014\020\uffde\045\033\046\032\047\035\050\030\001\002" +
    "\000\004\020\340\001\002\000\004\021\341\001\002\000" +
    "\050\003\221\011\075\012\067\022\uffd9\025\210\030\216" +
    "\031\214\033\ufffa\034\ufffa\035\212\045\ufffa\046\ufffa\047" +
    "\ufffa\050\ufffa\051\010\064\223\065\215\066\064\067\037" +
    "\001\002\000\004\022\343\001\002\000\010\037\uffe1\040" +
    "\uffe1\052\uffe1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\341\000\006\002\004\003\003\001\001\000\016\004" +
    "\015\005\014\024\012\025\016\026\013\027\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\060\334\001\001\000\004\060\320" +
    "\001\001\000\004\057\201\001\001\000\002\001\001\000" +
    "\014\006\024\007\025\010\022\013\023\017\030\001\001" +
    "\000\002\001\001\000\012\024\017\025\016\026\013\027" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\174\012\173\060\172\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\154\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\060\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\010\041\030\042\031\040\032\043\001\001\000\002" +
    "\001\001\000\004\060\153\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\041\031\045\032\043\001\001" +
    "\000\002\001\001\000\006\020\051\021\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\040\077\041\070\042" +
    "\067\044\065\045\101\046\056\050\062\055\060\056\055" +
    "\060\064\001\001\000\004\060\152\001\001\000\002\001" +
    "\001\000\020\040\077\041\070\045\151\046\056\050\062" +
    "\056\055\060\064\001\001\000\024\040\077\041\070\044" +
    "\150\045\101\046\056\050\062\055\060\056\055\060\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\022\131\023\134\047\132\056\133\001\001" +
    "\000\012\051\113\052\115\053\105\054\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\040\077\041\070\044\102\045\101\046\056\050" +
    "\062\055\060\056\055\060\064\001\001\000\002\001\001" +
    "\000\012\051\113\052\115\053\105\054\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\040\077\041\070\044\125" +
    "\045\101\046\056\050\062\055\060\056\055\060\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\051\113\052\115\053\105\054\103\001\001\000\002\001" +
    "\001\000\026\040\077\041\070\042\130\044\065\045\101" +
    "\046\056\050\062\055\060\056\055\060\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\060\145\001\001\000" +
    "\026\040\077\041\070\042\143\044\065\045\101\046\056" +
    "\050\062\055\060\056\055\060\064\001\001\000\024\040" +
    "\077\041\070\044\140\045\101\046\056\050\062\055\060" +
    "\056\055\060\064\001\001\000\012\051\113\052\115\053" +
    "\105\054\103\001\001\000\004\022\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\051\113" +
    "\052\115\053\105\054\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\060\155\001\001" +
    "\000\006\015\157\016\156\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\162\001\001" +
    "\000\004\014\163\001\001\000\002\001\001\000\024\040" +
    "\077\041\070\044\165\045\101\046\056\050\062\055\060" +
    "\056\055\060\064\001\001\000\012\051\113\052\115\053" +
    "\105\054\103\001\001\000\002\001\001\000\024\040\077" +
    "\041\070\044\170\045\101\046\056\050\062\055\060\056" +
    "\055\060\064\001\001\000\012\051\113\052\115\053\105" +
    "\054\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\176\060\172" +
    "\001\001\000\002\001\001\000\024\040\077\041\070\044" +
    "\200\045\101\046\056\050\062\055\060\056\055\060\064" +
    "\001\001\000\012\051\113\052\115\053\105\054\103\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\004\217\005\014\033\212\034" +
    "\206\037\216\040\223\041\070\043\221\046\210\056\055" +
    "\060\064\001\001\000\030\004\217\005\014\033\317\034" +
    "\206\037\216\040\223\041\070\043\221\046\210\056\055" +
    "\060\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\040\077\041\070\044\225\045" +
    "\101\046\056\050\062\055\060\056\055\060\064\001\001" +
    "\000\012\051\113\052\115\053\105\054\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\040\077\041\070\044\232\045\101\046\056\050\062\055" +
    "\060\056\055\060\064\001\001\000\012\051\113\052\115" +
    "\053\105\054\103\001\001\000\002\001\001\000\030\004" +
    "\217\005\014\033\235\034\206\037\216\040\223\041\070" +
    "\043\221\046\210\056\055\060\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\040\077\041\070\044\240" +
    "\045\101\046\056\050\062\055\060\056\055\060\064\001" +
    "\001\000\012\051\113\052\115\053\105\054\103\001\001" +
    "\000\002\001\001\000\006\004\243\005\014\001\001\000" +
    "\002\001\001\000\024\040\077\041\070\044\245\045\101" +
    "\046\056\050\062\055\060\056\055\060\064\001\001\000" +
    "\012\051\113\052\115\053\105\054\103\001\001\000\010" +
    "\035\250\056\251\060\247\001\001\000\004\056\260\001" +
    "\001\000\002\001\001\000\004\060\252\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\004\217\005\014\033" +
    "\255\034\206\037\216\040\223\041\070\043\221\046\210" +
    "\056\055\060\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\040\077\041\070\044\261\045\101\046\056" +
    "\050\062\055\060\056\055\060\064\001\001\000\002\001" +
    "\001\000\012\051\113\052\115\053\105\054\103\001\001" +
    "\000\002\001\001\000\030\004\217\005\014\033\264\034" +
    "\206\037\216\040\223\041\070\043\221\046\210\056\055" +
    "\060\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\040\077\041\070\044\270\045\101" +
    "\046\056\050\062\055\060\056\055\060\064\001\001\000" +
    "\012\051\113\052\115\053\105\054\103\001\001\000\002" +
    "\001\001\000\024\040\077\041\070\044\273\045\101\046" +
    "\056\050\062\055\060\056\055\060\064\001\001\000\012" +
    "\051\113\052\115\053\105\054\103\001\001\000\024\040" +
    "\077\041\070\044\275\045\101\046\056\050\062\055\060" +
    "\056\055\060\064\001\001\000\012\051\113\052\115\053" +
    "\105\054\103\001\001\000\002\001\001\000\030\004\217" +
    "\005\014\033\300\034\206\037\216\040\223\041\070\043" +
    "\221\046\210\056\055\060\064\001\001\000\002\001\001" +
    "\000\004\036\302\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\040\077\041\070\044\306" +
    "\045\101\046\056\050\062\055\060\056\055\060\064\001" +
    "\001\000\012\051\113\052\115\053\105\054\103\001\001" +
    "\000\002\001\001\000\030\004\217\005\014\033\311\034" +
    "\206\037\216\040\223\041\070\043\221\046\210\056\055" +
    "\060\064\001\001\000\002\001\001\000\004\036\313\001" +
    "\001\000\002\001\001\000\030\004\217\005\014\033\315" +
    "\034\206\037\216\040\223\041\070\043\221\046\210\056" +
    "\055\060\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\010\041\030" +
    "\322\031\040\032\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\325\001\001\000\002\001\001\000" +
    "\030\004\217\005\014\033\327\034\206\037\216\040\223" +
    "\041\070\043\221\046\210\056\055\060\064\001\001\000" +
    "\002\001\001\000\024\040\077\041\070\044\331\045\101" +
    "\046\056\050\062\055\060\056\055\060\064\001\001\000" +
    "\012\051\113\052\115\053\105\054\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\010" +
    "\041\030\336\031\040\032\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\004\217\005\014\033\341\034" +
    "\206\037\216\040\223\041\070\043\221\046\210\056\055" +
    "\060\064\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**********************************************************************
     * sobrecàrrega de mètodes per gestionar els errors que es localitzin *
     **********************************************************************/
    int numberErrors = 0;
    BufferedWriter bf;

    final String ERROR_FILE = "errors.txt";

    private MVP mvp = null;

    public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf, MVP mvp) {
        super(s,sf);
        this.mvp = mvp;
    }

    public int getNumberErrors() {
        return numberErrors;
    }

    public MVP getMVP(){
        return this.mvp;
    }

    @Override
    public void report_error(String message, Object info) {
        numberErrors++;
        StringBuilder msg = new StringBuilder("");
        if ((info != null) && (info instanceof java_cup.runtime.Symbol)) {
            ComplexSymbol token = (ComplexSymbol)info;
            Location l = token.getLeft();

            if (l != null) {
                msg.append(message + " on ")
                   .append("row: ")
                   .append(l.getLine())
                   .append(", column: ")
                   .append(l.getColumn())
                   .append('\n');
            }
        }
        if ((info != null) && (info instanceof BaseNode)) {
            BaseNode node = (BaseNode)info;
            
            msg.append("SEMANTIC ERROR: ")
                .append(message + " on ")
                .append("row: ")
                .append(node.getLine())
                .append(", column: ")
                .append(node.getColumn())
                .append("\n");
        }
        //msg.append(": ").append(message);

        if(numberErrors==1){
            try {
                //És el primer error detectat
                bf = new BufferedWriter(new FileWriter(ERROR_FILE));
            } catch (IOException ex) {
            }
        }

        try {
            bf.write(msg.toString()+"\n");
        } catch (IOException ex) {
        }

        if (mvp.semantic() && !mvp.sintactic()) {
            mvp.semanticError(msg);
        } else {
            mvp.sintacticError(msg);
        }
    }

    @Override
    public void report_fatal_error(String message, Object info) throws Exception {
        mvp.sintactic(true);
        report_error("FATAL ERROR: ("+message+")"+'\n', info);
        done_parsing();
        mvp.sintactic(false);
    }

    @Override
    public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws Exception {
        mvp.sintactic(true);
        report_error("FATAL SINTACTIC ERROR: unexpected "+ParserSym.terminalNames[cur_token.sym]+'\n', cur_token);
        done_parsing();
        mvp.sintactic(false);
    }

    @Override
    public void syntax_error(java_cup.runtime.Symbol cur_token) {
        mvp.sintactic(true);
        report_error("SINTACTIC ERROR: Unexpected "+ParserSym.terminalNames[cur_token.sym]+'\n', cur_token);
        mvp.sintactic(false);
    }

    private int extractLine(ComplexSymbol symbol) {
        Location l = symbol.getLeft();
        if(l != null) {
            return l.getLine();
        }
        return 0;
    }

    private int extractColumn(ComplexSymbol symbol) {
        Location l = symbol.getLeft();
        if(l != null) {
            return l.getColumn();
        }
        return 0;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAM EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ProgramNode start_val = (ProgramNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAM ::= DECL_LIST METHOD_LIST MAIN 
            {
              ProgramNode RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DeclListNode dl = (DeclListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		MethodListNode ml = (MethodListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		MainNode m = (MainNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ProgramNode(dl, ml, m, m.getLine(), m.getColumn());                                     
                                                                                                                                                                                         analisisSemantico sem = new analisisSemantico(RESULT, parser); if(numberErrors == 0){sem.handleProgram();} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECL_LIST ::= DECL_LIST DECL sym_semicolon 
            {
              DeclListNode RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DeclListNode dl = (DeclListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DeclNode d = (DeclNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new DeclListNode(dl, d, d.getLine(), d.getColumn());                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_LIST",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECL_LIST ::= DECL_LIST DECL error 
            {
              DeclListNode RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DeclListNode dl = (DeclListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DeclNode d = (DeclNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new DeclListNode();                                                                         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_LIST",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECL_LIST ::= 
            {
              DeclListNode RESULT =null;
		 RESULT = new DeclListNode();                                                                         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_LIST",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECL ::= MODIFIER ACTUAL_DECL 
            {
              DeclNode RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ModifierNode m = (ModifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int adleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int adright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ActualDeclNode ad = (ActualDeclNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DeclNode(m, ad, ad.getLine(), ad.getColumn());                                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // MODIFIER ::= r_const 
            {
              ModifierNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol c = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ModifierNode(TipoDescripcion.dconst, true, extractLine(c), extractColumn(c));           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIFIER",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MODIFIER ::= 
            {
              ModifierNode RESULT =null;
		 RESULT = new ModifierNode(TipoDescripcion.dvar, false, 0, 0);                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIFIER",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ACTUAL_DECL ::= DECL_ELEM 
            {
              ActualDeclNode RESULT =null;
		int deleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int deright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DeclElemNode de = (DeclElemNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ActualDeclNode(de, null, null, de.getLine(), de.getColumn());                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ACTUAL_DECL",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ACTUAL_DECL ::= DECL_ARRAY 
            {
              ActualDeclNode RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DeclArrayNode da = (DeclArrayNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ActualDeclNode(null, da, null, da.getLine(), da.getColumn());                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ACTUAL_DECL",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ACTUAL_DECL ::= DECL_TUPEL 
            {
              ActualDeclNode RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DeclTupelNode dt = (DeclTupelNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ActualDeclNode(null, null, dt, dt.getLine(), dt.getColumn());                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ACTUAL_DECL",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECL_ELEM ::= TYPE_ID ELEM_LIST 
            {
              DeclElemNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeIdNode t = (TypeIdNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ElemListNode el = (ElemListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DeclElemNode(t, el, t.getLine(), t.getColumn());                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_ELEM",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TYPE_ID ::= r_int 
            {
              TypeIdNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol t = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeIdNode(TypeEnum.INT, extractLine(t), extractColumn(t));                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE_ID",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TYPE_ID ::= r_char 
            {
              TypeIdNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol t = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeIdNode(TypeEnum.CHAR, extractLine(t), extractColumn(t));                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE_ID",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TYPE_ID ::= r_bool 
            {
              TypeIdNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol t = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeIdNode(TypeEnum.BOOL, extractLine(t), extractColumn(t));                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE_ID",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TYPE_ID ::= r_string 
            {
              TypeIdNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol t = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeIdNode(TypeEnum.STRING, extractLine(t), extractColumn(t));                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE_ID",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ELEM_LIST ::= ELEM_LIST sym_comma ELEM_ID_ASSIG 
            {
              ElemListNode RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ElemListNode el = (ElemListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ElemIdAssigNode ea = (ElemIdAssigNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ElemListNode(el, ea, el.getLine(), el.getColumn());                                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELEM_LIST",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ELEM_LIST ::= ELEM_ID_ASSIG 
            {
              ElemListNode RESULT =null;
		int eialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eiaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ElemIdAssigNode eia = (ElemIdAssigNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ElemListNode(null, eia, eia.getLine(), eia.getColumn());                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELEM_LIST",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ELEM_ID_ASSIG ::= ID 
            {
              ElemIdAssigNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ElemIdAssigNode(null, id, id.getLine(), id.getColumn());                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELEM_ID_ASSIG",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ELEM_ID_ASSIG ::= ID sym_eq EXP 
            {
              ElemIdAssigNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode exp = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ElemIdAssigNode(exp, id, id.getLine(), id.getColumn());                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELEM_ID_ASSIG",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECL_ARRAY ::= r_array TYPE_ID ID ARRAY_DECL 
            {
              DeclArrayNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ComplexSymbol r = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TypeIdNode tid = (TypeIdNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int adleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int adright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayDeclNode ad = (ArrayDeclNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DeclArrayNode(tid, id, ad, extractLine(r), extractColumn(r));                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_ARRAY",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DIM_ARRAY ::= DIM_ARRAY sym_lbracket EXP sym_rbracket 
            {
              DimArrayNode RESULT =null;
		int dimleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		DimArrayNode dim = (DimArrayNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new DimArrayNode(dim, e, extractLine(dim), extractColumn(dim));                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DIM_ARRAY",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DIM_ARRAY ::= sym_lbracket EXP sym_rbracket 
            {
              DimArrayNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ComplexSymbol s = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new DimArrayNode(null, e, extractLine(s), extractColumn(s));                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DIM_ARRAY",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ARRAY_DECL ::= INIT_ARRAY 
            {
              ArrayDeclNode RESULT =null;
		int ialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InitArrayNode ia = (InitArrayNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayDeclNode(ia, ia.getLine(), ia.getColumn());                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAY_DECL",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INIT_ARRAY ::= sym_eq r_new TYPE_ID DIM_ARRAY 
            {
              InitArrayNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ComplexSymbol e = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeIdNode t = (TypeIdNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int daleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DimArrayNode da = (DimArrayNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InitArrayNode(t, da, extractLine(da), extractColumn(da));                               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT_ARRAY",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECL_TUPEL ::= r_tupel ID sym_lparen PARAM_LIST sym_rparen TUPEL_DECL 
            {
              DeclTupelNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ComplexSymbol r = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParamListNode pl = (ParamListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TupelDeclNode td = (TupelDeclNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DeclTupelNode(id, pl, td, extractLine(r), extractColumn(r));                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_TUPEL",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TUPEL_DECL ::= INIT_TUPEL 
            {
              TupelDeclNode RESULT =null;
		int itleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int itright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InitTupelNode it = (InitTupelNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TupelDeclNode(it, it.getLine(), it.getColumn());                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TUPEL_DECL",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INIT_TUPEL ::= sym_eq r_new r_tupel sym_lparen PARAM_IN sym_rparen 
            {
              InitTupelNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ComplexSymbol r = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ParamInNode pi = (ParamInNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new  InitTupelNode(pi, extractLine(r), extractColumn(r));                                   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT_TUPEL",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // METHOD_LIST ::= METHOD METHOD_LIST 
            {
              MethodListNode RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		MethodNode m = (MethodNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		MethodListNode ml = (MethodListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MethodListNode(m, ml, m.getLine(), m.getColumn());                                      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METHOD_LIST",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // METHOD_LIST ::= 
            {
              MethodListNode RESULT =null;
		 RESULT = new MethodListNode();                                                                       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METHOD_LIST",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // METHOD ::= PROC 
            {
              MethodNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ProcNode p = (ProcNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MethodNode(p, null, p.getLine(), p.getColumn());                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METHOD",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // METHOD ::= FUNC 
            {
              MethodNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FuncNode f = (FuncNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MethodNode(null, f, f.getLine(), f.getColumn());                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METHOD",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PROC ::= r_procedure ID sym_lparen PARAM_LIST sym_rparen sym_lcbracket SENTENCE_LIST sym_rcbracket 
            {
              ProcNode RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		ComplexSymbol m = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ParamListNode pl = (ParamListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SentenceListNode sl = (SentenceListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ProcNode(pl, sl, id, extractLine(m), extractColumn(m));                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROC",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FUNC ::= r_function ID sym_lparen PARAM_LIST sym_rparen sym_colon TYPE_ID sym_lcbracket SENTENCE_LIST r_return EXP sym_semicolon sym_rcbracket 
            {
              FuncNode RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		ComplexSymbol m = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		ParamListNode pl = (ParamListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		TypeIdNode t = (TypeIdNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SentenceListNode sl = (SentenceListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode exp = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new FuncNode(id, pl, t, sl, exp, extractLine(m), extractColumn(m));                         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNC",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PARAM_LIST ::= ACTUAL_PARAM_LIST 
            {
              ParamListNode RESULT =null;
		int aplleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aplright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ActualParamListNode apl = (ActualParamListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ParamListNode(apl, apl.getLine(), apl.getColumn());                                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM_LIST",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PARAM_LIST ::= 
            {
              ParamListNode RESULT =null;
		 RESULT = new ParamListNode();                                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM_LIST",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ACTUAL_PARAM_LIST ::= PARAM 
            {
              ActualParamListNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParamNode p = (ParamNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ActualParamListNode(p, null, p.getLine(), p.getColumn());                               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ACTUAL_PARAM_LIST",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ACTUAL_PARAM_LIST ::= PARAM sym_comma ACTUAL_PARAM_LIST 
            {
              ActualParamListNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParamNode p = (ParamNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aplleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aplright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ActualParamListNode apl = (ActualParamListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ActualParamListNode(p, apl, p.getLine(), p.getColumn());                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ACTUAL_PARAM_LIST",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PARAM ::= TYPE_ID ID 
            {
              ParamNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeIdNode t = (TypeIdNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ParamNode(t, id, t.getLine(), t.getColumn());                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCE_LIST ::= SENTENCE SENTENCE_LIST 
            {
              SentenceListNode RESULT =null;
		int sentenceleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentenceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SentenceNode sentence = (SentenceNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sentence_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentence_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SentenceListNode sentence_list = (SentenceListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SentenceListNode(sentence, sentence_list, sentence.getLine(), sentence.getColumn());    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCE_LIST",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCE_LIST ::= 
            {
              SentenceListNode RESULT =null;
		 RESULT = new SentenceListNode();                                                                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCE_LIST",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCE ::= r_if sym_lparen EXP sym_rparen sym_lcbracket SENTENCE_LIST sym_rcbracket NEXT_IF 
            {
              SentenceNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		ComplexSymbol v = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ExpressionNode exp = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sentenceleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sentenceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SentenceListNode sentence = (SentenceListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NextIfNode si = (NextIfNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SentenceNode(null, null, exp, sentence, si,null, SentenceType.IF, extractLine(v), extractColumn(v)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCE ::= r_while sym_lparen EXP sym_rparen sym_lcbracket SENTENCE_LIST sym_rcbracket 
            {
              SentenceNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		ComplexSymbol v = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ExpressionNode exp = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sentenceleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentenceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SentenceListNode sentence = (SentenceListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SentenceNode(null, null, exp, sentence, null,null, SentenceType.WHILE, extractLine(v), extractColumn(v)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCE ::= DECL sym_semicolon 
            {
              SentenceNode RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DeclNode decl = (DeclNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SentenceNode(decl, null, null, null, null,null,  SentenceType.DECL, decl.getLine(), decl.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCE ::= INST sym_semicolon 
            {
              SentenceNode RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		InstNode inst = (InstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SentenceNode(null, inst, null, null, null,null,  SentenceType.INST, inst.getLine(), inst.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCE ::= r_for sym_lparen DECL sym_semicolon EXP sym_semicolon FOR_INST sym_rparen sym_lcbracket SENTENCE_LIST sym_rcbracket 
            {
              SentenceNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		ComplexSymbol v = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int declleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		DeclNode decl = (DeclNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		ExpressionNode exp = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ForInstNode inst = (ForInstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SentenceListNode sl = (SentenceListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SentenceNode(decl, null, exp, sl, null,inst, SentenceType.FOR, extractLine(v), extractColumn(v)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCE ::= r_repeat sym_lcbracket SENTENCE_LIST sym_rcbracket r_until sym_lparen EXP sym_rparen 
            {
              SentenceNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		ComplexSymbol v = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		SentenceListNode sl = (SentenceListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionNode exp = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SentenceNode(null, null, exp, sl, null, null, SentenceType.REPEAT, extractLine(v), extractColumn(v)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCE ::= error 
            {
              SentenceNode RESULT =null;
		 RESULT = new SentenceNode(null, null, null, null, null,null, SentenceType.NONE, 0, 0);               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FOR_INST ::= SPECIAL_OP ID 
            {
              ForInstNode RESULT =null;
		int espleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int espright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SpecialOpNode esp = (SpecialOpNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IdentifierNode v = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ForInstNode(esp,null,v, v.getLine(), v.getColumn());                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_INST",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FOR_INST ::= ID SPECIAL_OP 
            {
              ForInstNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		IdentifierNode v = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int espleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int espright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SpecialOpNode esp = (SpecialOpNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ForInstNode(esp,null,v, v.getLine(), v.getColumn());                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_INST",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FOR_INST ::= ID sym_eq EXP 
            {
              ForInstNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		IdentifierNode v = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode exp = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ForInstNode(null,exp,v, v.getLine(), v.getColumn());                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_INST",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NEXT_IF ::= r_else sym_lcbracket SENTENCE_LIST sym_rcbracket 
            {
              NextIfNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ComplexSymbol r = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SentenceListNode v = (SentenceListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NextIfNode(v,null,null, extractLine(r), extractColumn(r));                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NEXT_IF",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NEXT_IF ::= r_elif sym_lparen EXP sym_rparen sym_lcbracket SENTENCE_LIST sym_rcbracket NEXT_IF 
            {
              NextIfNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		ComplexSymbol r = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ExpressionNode exp = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SentenceListNode sents = (SentenceListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nextleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nextright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NextIfNode next = (NextIfNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NextIfNode(sents,exp,next, extractLine(r), extractColumn(r));                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NEXT_IF",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NEXT_IF ::= 
            {
              NextIfNode RESULT =null;
		 RESULT = new NextIfNode();                                                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NEXT_IF",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // INST ::= INST_EXP 
            {
              InstNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InstExpNode v = (InstExpNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstNode(v, null,null, InstType.EXP, v.getLine(), v.getColumn());                       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // INST ::= ASSIG 
            {
              InstNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AssigNode v = (AssigNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstNode(null, v,null, InstType.ASSIG, v.getLine(), v.getColumn());                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // INST ::= r_print sym_lparen EXP sym_rparen 
            {
              InstNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ComplexSymbol v = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionNode exp = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new InstNode(null, null,exp, InstType.PRINT, exp.getLine(), exp.getColumn());               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // INST ::= r_println sym_lparen EXP sym_rparen 
            {
              InstNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ComplexSymbol v = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionNode exp = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new InstNode(null, null,exp, InstType.PRINTLN, exp.getLine(), exp.getColumn());             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // INST_EXP ::= SPECIAL_OP ID 
            {
              InstExpNode RESULT =null;
		int op_espleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int op_espright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SpecialOpNode op_esp = (SpecialOpNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstExpNode(op_esp, null, id, false, id.getLine(), id.getColumn());                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST_EXP",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // INST_EXP ::= ID SPECIAL_OP 
            {
              InstExpNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int op_espleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op_espright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SpecialOpNode op_esp = (SpecialOpNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstExpNode(op_esp, null, id, false, id.getLine(), id.getColumn());                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST_EXP",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // INST_EXP ::= METHOD_CALL 
            {
              InstExpNode RESULT =null;
		int m_callleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int m_callright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		MethodCallNode m_call = (MethodCallNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstExpNode(null, m_call, null, false, m_call.getLine(), m_call.getColumn());           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST_EXP",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // INST_EXP ::= r_read sym_lparen sym_rparen 
            {
              InstExpNode RESULT =null;
		int readleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int readright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ComplexSymbol read = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new InstExpNode(null, null, null, true, extractLine(read), extractColumn(read));            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST_EXP",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // METHOD_CALL ::= ID sym_lparen PARAM_IN sym_rparen 
            {
              MethodCallNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		IdentifierNode v = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int param_inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int param_inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ParamInNode param_in = (ParamInNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new MethodCallNode(param_in, v, v.getLine(), v.getColumn());                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METHOD_CALL",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PARAM_IN ::= EXP sym_comma PARAM_IN 
            {
              ParamInNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode exp = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int param_inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int param_inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParamInNode param_in = (ParamInNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ParamInNode(exp, param_in, exp.getLine(), exp.getColumn());                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM_IN",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PARAM_IN ::= EXP 
            {
              ParamInNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode exp = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ParamInNode(exp, null, exp.getLine(), exp.getColumn());                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM_IN",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PARAM_IN ::= 
            {
              ParamInNode RESULT =null;
		 RESULT = new ParamInNode();                                                                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM_IN",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ASSIG ::= GEST_IDX sym_eq EXP 
            {
              AssigNode RESULT =null;
		int gidxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int gidxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		GestIdxNode gidx = (GestIdxNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ComplexSymbol o = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode exp = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AssigNode(exp, gidx, extractLine(o), extractColumn(o));                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIG",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXP ::= sym_lparen EXP sym_rparen 
            {
              ExpressionNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionNode exp = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ExpressionNode(exp, null, null, null, null, null, null, exp.getLine(), exp.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXP ::= NEG_OP EXP 
            {
              ExpressionNode RESULT =null;
		int neg_opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int neg_opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NegOpNode neg_op = (NegOpNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode exp = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpressionNode(exp, null, null, null, neg_op, null, null, neg_op.getLine(), neg_op.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXP ::= EXP BINARY_OP EXP 
            {
              ExpressionNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode exp1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bin_opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bin_opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BinaryOpNode bin_op = (BinaryOpNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode exp2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpressionNode(exp1, exp2, bin_op, null, null, null, null, extractLine(bin_op), extractColumn(bin_op)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXP ::= SIMPLE_VALUE 
            {
              ExpressionNode RESULT =null;
		int smplleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int smplright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimpleValueNode smpl = (SimpleValueNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpressionNode(null, null, null, smpl, null, null, null, smpl.getLine(), smpl.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SIMPLE_VALUE ::= LITERAL 
            {
              SimpleValueNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LiteralNode l = (LiteralNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SimpleValueNode(null, l, null, null, null, l.getType(), l.getLine(), l.getColumn());    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIMPLE_VALUE",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SIMPLE_VALUE ::= GEST_IDX 
            {
              SimpleValueNode RESULT =null;
		int gidxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int gidxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		GestIdxNode gidx = (GestIdxNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SimpleValueNode(null, null, gidx, null, null, null, extractLine(gidx), extractColumn(gidx));    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIMPLE_VALUE",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SIMPLE_VALUE ::= op_sub SIMPLE_VALUE 
            {
              SimpleValueNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ComplexSymbol o = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int smplleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int smplright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimpleValueNode smpl = (SimpleValueNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SimpleValueNode(null, null, null, null, smpl, null, extractLine(o), extractColumn(o));  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIMPLE_VALUE",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SIMPLE_VALUE ::= INST_EXP 
            {
              SimpleValueNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InstExpNode v = (InstExpNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SimpleValueNode(null, null, null, v, null, null, v.getLine(), v.getColumn());           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIMPLE_VALUE",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // GEST_IDX ::= ID GESTOR 
            {
              GestIdxNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int gestleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int gestright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		GestorNode gest = (GestorNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GestIdxNode(id, gest, extractLine(id), extractColumn(id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GEST_IDX",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // GESTOR ::= GEST_ARRAY 
            {
              GestorNode RESULT =null;
		int gestArrayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int gestArrayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		GestArrayNode gestArray = (GestArrayNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GestorNode(gestArray, null, extractLine(gestArray), extractColumn(gestArray)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GESTOR",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // GESTOR ::= GEST_TUPEL 
            {
              GestorNode RESULT =null;
		int gtupleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int gtupright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		GestTupelNode gtup = (GestTupelNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GestorNode(null, gtup, extractLine(gtup), extractColumn(gtup)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GESTOR",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // GESTOR ::= 
            {
              GestorNode RESULT =null;
		 RESULT = new GestorNode(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GESTOR",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // GEST_ARRAY ::= sym_lbracket EXP sym_rbracket GEST_ARRAY 
            {
              GestArrayNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ComplexSymbol v = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode exp = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int gestArrayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int gestArrayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		GestArrayNode gestArray = (GestArrayNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GestArrayNode(exp, gestArray, extractLine(v), extractColumn(v));          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GEST_ARRAY",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // GEST_ARRAY ::= sym_lbracket EXP sym_rbracket 
            {
              GestArrayNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ComplexSymbol v = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionNode exp = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new GestArrayNode(exp, null, extractLine(v), extractColumn(v));                                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GEST_ARRAY",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // GEST_TUPEL ::= sym_dot ID 
            {
              GestTupelNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ComplexSymbol v = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GestTupelNode(id, extractLine(v), extractColumn(v));                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GEST_TUPEL",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // LITERAL ::= l_int 
            {
              LiteralNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LiteralWrapper l = (LiteralWrapper)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LiteralNode(Integer.toString((Integer)l.getLiteral()), TypeEnum.INT, l.getLine(), l.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LITERAL ::= l_char 
            {
              LiteralNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LiteralWrapper l = (LiteralWrapper)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LiteralNode((String)l.getLiteral(), TypeEnum.CHAR, l.getLine(), l.getColumn());                   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LITERAL ::= r_true 
            {
              LiteralNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LiteralWrapper l = (LiteralWrapper)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LiteralNode((String)l.getLiteral(), TypeEnum.BOOL, l.getLine(), l.getColumn());                   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LITERAL ::= r_false 
            {
              LiteralNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LiteralWrapper l = (LiteralWrapper)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LiteralNode((String)l.getLiteral(), TypeEnum.BOOL, l.getLine(), l.getColumn());                   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LITERAL ::= l_string 
            {
              LiteralNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LiteralWrapper l = (LiteralWrapper)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LiteralNode((String)l.getLiteral(), TypeEnum.STRING, l.getLine(), l.getColumn());                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // BINARY_OP ::= ARIT_OP 
            {
              BinaryOpNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AritOpNode v = (AritOpNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOpNode(v, null, null, v.getLine(), v.getColumn());                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OP",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // BINARY_OP ::= REL_OP 
            {
              BinaryOpNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		RelOpNode v = (RelOpNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOpNode(null, v, null, v.getLine(), v.getColumn());                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OP",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // BINARY_OP ::= LOGIC_OP 
            {
              BinaryOpNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LogicOpNode v = (LogicOpNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOpNode(null, null, v, v.getLine(), v.getColumn());                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OP",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // REL_OP ::= rel_eq 
            {
              RelOpNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol o = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RelOpNode(RelOpType.EQ, extractLine(o), extractColumn(o));                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REL_OP",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // REL_OP ::= rel_neq 
            {
              RelOpNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol o = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RelOpNode(RelOpType.NEQ, extractLine(o), extractColumn(o));                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REL_OP",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // REL_OP ::= rel_lt 
            {
              RelOpNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol o = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RelOpNode(RelOpType.LT, extractLine(o), extractColumn(o));                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REL_OP",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // REL_OP ::= rel_gt 
            {
              RelOpNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol o = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RelOpNode(RelOpType.GT, extractLine(o), extractColumn(o));                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REL_OP",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // REL_OP ::= rel_le 
            {
              RelOpNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol o = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RelOpNode(RelOpType.LE, extractLine(o), extractColumn(o));                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REL_OP",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // REL_OP ::= rel_ge 
            {
              RelOpNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol o = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RelOpNode(RelOpType.GE, extractLine(o), extractColumn(o));                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REL_OP",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // LOGIC_OP ::= r_or 
            {
              LogicOpNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol o = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LogicOpNode(LogicOpType.OR, extractLine(o), extractColumn(o));                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGIC_OP",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // LOGIC_OP ::= r_and 
            {
              LogicOpNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol o = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LogicOpNode(LogicOpType.AND, extractLine(o), extractColumn(o));                         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGIC_OP",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ARIT_OP ::= op_add 
            {
              AritOpNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol o = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AritOpNode(AritOpType.ADD, extractLine(o), extractColumn(o));                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARIT_OP",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ARIT_OP ::= op_sub 
            {
              AritOpNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol o = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AritOpNode(AritOpType.SUB, extractLine(o), extractColumn(o));                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARIT_OP",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ARIT_OP ::= op_mul 
            {
              AritOpNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol o = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AritOpNode(AritOpType.MUL, extractLine(o), extractColumn(o));                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARIT_OP",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ARIT_OP ::= op_div 
            {
              AritOpNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol o = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AritOpNode(AritOpType.DIV, extractLine(o), extractColumn(o));                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARIT_OP",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ARIT_OP ::= op_mod 
            {
              AritOpNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol o = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AritOpNode(AritOpType.MOD, extractLine(o), extractColumn(o));                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARIT_OP",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NEG_OP ::= r_not 
            {
              NegOpNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol n = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NegOpNode(extractLine(n), extractColumn(n));                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NEG_OP",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // SPECIAL_OP ::= op_increment 
            {
              SpecialOpNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol o = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SpecialOpNode(SpecialOpType.INCREMENT, extractLine(o), extractColumn(o));               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SPECIAL_OP",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SPECIAL_OP ::= op_decrement 
            {
              SpecialOpNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol o = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SpecialOpNode(SpecialOpType.DECREMENT, extractLine(o), extractColumn(o));               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SPECIAL_OP",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // MAIN ::= r_main sym_lparen sym_rparen sym_lcbracket SENTENCE_LIST sym_rcbracket 
            {
              MainNode RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ComplexSymbol m = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SentenceListNode sl = (SentenceListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new MainNode(sl, extractLine(m), extractColumn(m));                                         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ID ::= identifier 
            {
              IdentifierNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LiteralWrapper i = (LiteralWrapper)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IdentifierNode((String)i.getLiteral(), i.getLine(), i.getColumn());                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
