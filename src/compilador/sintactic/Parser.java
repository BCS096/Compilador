
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compilador.sintactic;

import java.io.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import compilador.main.MVP;
import compilador.sintactic.nodes.*;
import tablas.IdDescripcion.TipoDescripcion;
import types.*;
import compilador.lexic.LiteralWrapper;
import compilador.sintactic.semantic.analisisSemantico;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\160\000\002\002\004\000\002\002\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\002\000\002\004\004" +
    "\000\002\005\003\000\002\005\002\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\007\004\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\011\005\000\002\011\003\000\002\012\003" +
    "\000\002\012\005\000\002\013\006\000\002\014\006\000" +
    "\002\014\005\000\002\015\003\000\002\015\002\000\002" +
    "\016\006\000\002\017\010\000\002\020\003\000\002\021" +
    "\010\000\002\024\004\000\002\024\002\000\002\025\003" +
    "\000\002\025\003\000\002\026\012\000\002\027\017\000" +
    "\002\030\003\000\002\030\002\000\002\031\003\000\002" +
    "\031\005\000\002\032\004\000\002\032\004\000\002\033" +
    "\003\000\002\033\004\000\002\034\004\000\002\034\002" +
    "\000\002\035\012\000\002\035\011\000\002\035\004\000" +
    "\002\035\004\000\002\035\015\000\002\035\012\000\002" +
    "\035\003\000\002\036\004\000\002\036\004\000\002\036" +
    "\005\000\002\037\006\000\002\037\012\000\002\037\002" +
    "\000\002\040\003\000\002\040\003\000\002\040\006\000" +
    "\002\040\006\000\002\041\004\000\002\041\004\000\002" +
    "\041\003\000\002\041\005\000\002\042\006\000\002\043" +
    "\005\000\002\043\003\000\002\043\002\000\002\044\005" +
    "\000\002\045\005\000\002\045\004\000\002\045\005\000" +
    "\002\045\003\000\002\046\003\000\002\046\003\000\002" +
    "\046\004\000\002\046\003\000\002\047\004\000\002\050" +
    "\003\000\002\050\003\000\002\050\002\000\002\022\006" +
    "\000\002\022\005\000\002\023\004\000\002\051\003\000" +
    "\002\051\003\000\002\051\003\000\002\051\003\000\002" +
    "\051\003\000\002\052\003\000\002\052\003\000\002\052" +
    "\003\000\002\053\003\000\002\053\003\000\002\053\003" +
    "\000\002\053\003\000\002\053\003\000\002\053\003\000" +
    "\002\054\003\000\002\054\003\000\002\055\003\000\002" +
    "\055\003\000\002\055\003\000\002\055\003\000\002\055" +
    "\003\000\002\056\003\000\002\057\003\000\002\057\003" +
    "\000\002\060\010\000\002\061\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\346\000\026\033\ufffd\034\ufffd\037\ufffd\040\ufffd\045" +
    "\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\001\002" +
    "\000\026\033\ufffa\034\ufffa\037\011\040\012\045\ufffa\046" +
    "\ufffa\047\ufffa\050\ufffa\051\010\052\uffe3\001\002\000\004" +
    "\002\006\001\002\000\004\002\001\001\002\000\010\037" +
    "\uffe1\040\uffe1\052\uffe1\001\002\000\016\033\ufffb\034\ufffb" +
    "\045\ufffb\046\ufffb\047\ufffb\050\ufffb\001\002\000\004\067" +
    "\037\001\002\000\004\067\037\001\002\000\004\052\210" +
    "\001\002\000\010\037\uffe2\040\uffe2\052\uffe2\001\002\000" +
    "\016\033\027\034\034\045\033\046\032\047\035\050\030" +
    "\001\002\000\006\003\021\013\022\001\002\000\010\037" +
    "\011\040\012\052\uffe3\001\002\000\004\052\uffe4\001\002" +
    "\000\026\033\ufffe\034\ufffe\037\ufffe\040\ufffe\045\ufffe\046" +
    "\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe\001\002\000\026" +
    "\033\uffff\034\uffff\037\uffff\040\uffff\045\uffff\046\uffff\047" +
    "\uffff\050\uffff\051\uffff\052\uffff\001\002\000\004\067\037" +
    "\001\002\000\006\003\ufff8\013\ufff8\001\002\000\006\003" +
    "\ufffc\013\ufffc\001\002\000\006\003\ufff9\013\ufff9\001\002" +
    "\000\012\045\033\046\032\047\035\050\030\001\002\000" +
    "\010\021\ufff2\023\ufff2\067\ufff2\001\002\000\006\003\ufff7" +
    "\013\ufff7\001\002\000\010\021\ufff4\023\ufff4\067\ufff4\001" +
    "\002\000\010\021\ufff5\023\ufff5\067\ufff5\001\002\000\004" +
    "\067\037\001\002\000\010\021\ufff3\023\ufff3\067\ufff3\001" +
    "\002\000\004\017\040\001\002\000\062\003\uff92\004\uff92" +
    "\005\uff92\006\uff92\007\uff92\010\uff92\011\uff92\012\uff92\013" +
    "\uff92\014\uff92\016\uff92\017\uff92\020\uff92\023\uff92\024\uff92" +
    "\044\uff92\053\uff92\054\uff92\055\uff92\056\uff92\057\uff92\060" +
    "\uff92\061\uff92\062\uff92\001\002\000\020\020\uffdd\033\045" +
    "\034\046\045\033\046\032\047\035\050\030\001\002\000" +
    "\004\067\037\001\002\000\004\067\037\001\002\000\004" +
    "\020\uffde\001\002\000\004\020\053\001\002\000\012\045" +
    "\033\046\032\047\035\050\030\001\002\000\004\067\uffd8" +
    "\001\002\000\006\014\050\020\uffdc\001\002\000\016\033" +
    "\045\034\046\045\033\046\032\047\035\050\030\001\002" +
    "\000\004\020\uffdb\001\002\000\004\067\uffd7\001\002\000" +
    "\004\044\055\001\002\000\006\003\uffe6\013\uffe6\001\002" +
    "\000\004\032\057\001\002\000\006\003\uffe7\013\uffe7\001" +
    "\002\000\004\034\060\001\002\000\004\017\061\001\002" +
    "\000\034\005\064\011\101\012\073\017\105\020\uffbc\042" +
    "\076\043\102\063\077\066\067\067\037\070\103\071\100" +
    "\072\066\001\002\000\004\067\037\001\002\000\046\003" +
    "\uffb5\004\uffb5\005\uffb5\006\uffb5\007\uffb5\010\uffb5\013\uffb5" +
    "\014\uffb5\020\uffb5\024\uffb5\053\uffb5\054\uffb5\055\uffb5\056" +
    "\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5\001\002\000\026" +
    "\005\064\011\101\012\073\042\076\043\102\066\067\067" +
    "\037\070\103\071\100\072\066\001\002\000\032\005\064" +
    "\011\101\012\073\017\105\042\076\043\102\063\077\066" +
    "\067\067\037\070\103\071\100\072\066\001\002\000\046" +
    "\003\uffa7\004\uffa7\005\uffa7\006\uffa7\007\uffa7\010\uffa7\013" +
    "\uffa7\014\uffa7\020\uffa7\024\uffa7\053\uffa7\054\uffa7\055\uffa7" +
    "\056\uffa7\057\uffa7\060\uffa7\061\uffa7\062\uffa7\001\002\000" +
    "\004\017\153\001\002\000\046\003\uffb6\004\uffb6\005\uffb6" +
    "\006\uffb6\007\uffb6\010\uffb6\013\uffb6\014\uffb6\020\uffb6\024" +
    "\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6" +
    "\061\uffb6\062\uffb6\001\002\000\062\003\uffaf\004\uffaf\005" +
    "\uffaf\006\uffaf\007\uffaf\010\uffaf\011\101\012\073\013\uffaf" +
    "\014\uffaf\016\143\017\142\020\uffaf\023\144\024\uffaf\044" +
    "\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf\060\uffaf" +
    "\061\uffaf\062\uffaf\001\002\000\040\004\116\005\113\006" +
    "\124\007\115\010\126\014\134\020\uffbd\053\131\054\111" +
    "\055\114\056\123\057\121\060\127\061\130\062\117\001" +
    "\002\000\050\003\uff94\004\uff94\005\uff94\006\uff94\007\uff94" +
    "\010\uff94\013\uff94\014\uff94\020\uff94\024\uff94\053\uff94\054" +
    "\uff94\055\uff94\056\uff94\057\uff94\060\uff94\061\uff94\062\uff94" +
    "\067\uff94\001\002\000\046\003\uffc1\004\uffc1\005\uffc1\006" +
    "\uffc1\007\uffc1\010\uffc1\013\uffc1\014\uffc1\020\uffc1\024\uffc1" +
    "\053\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1\061" +
    "\uffc1\062\uffc1\001\002\000\004\020\133\001\002\000\046" +
    "\003\uffa9\004\uffa9\005\uffa9\006\uffa9\007\uffa9\010\uffa9\013" +
    "\uffa9\014\uffa9\020\uffa9\024\uffa9\053\uffa9\054\uffa9\055\uffa9" +
    "\056\uffa9\057\uffa9\060\uffa9\061\uffa9\062\uffa9\001\002\000" +
    "\032\005\uff96\011\uff96\012\uff96\017\uff96\042\uff96\043\uff96" +
    "\063\uff96\066\uff96\067\uff96\070\uff96\071\uff96\072\uff96\001" +
    "\002\000\046\003\uffaa\004\uffaa\005\uffaa\006\uffaa\007\uffaa" +
    "\010\uffaa\013\uffaa\014\uffaa\020\uffaa\024\uffaa\053\uffaa\054" +
    "\uffaa\055\uffaa\056\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa" +
    "\001\002\000\050\003\uff95\004\uff95\005\uff95\006\uff95\007" +
    "\uff95\010\uff95\013\uff95\014\uff95\020\uff95\024\uff95\053\uff95" +
    "\054\uff95\055\uff95\056\uff95\057\uff95\060\uff95\061\uff95\062" +
    "\uff95\067\uff95\001\002\000\046\003\uffa8\004\uffa8\005\uffa8" +
    "\006\uffa8\007\uffa8\010\uffa8\013\uffa8\014\uffa8\020\uffa8\024" +
    "\uffa8\053\uffa8\054\uffa8\055\uffa8\056\uffa8\057\uffa8\060\uffa8" +
    "\061\uffa8\062\uffa8\001\002\000\046\003\uffab\004\uffab\005" +
    "\uffab\006\uffab\007\uffab\010\uffab\013\uffab\014\uffab\020\uffab" +
    "\024\uffab\053\uffab\054\uffab\055\uffab\056\uffab\057\uffab\060" +
    "\uffab\061\uffab\062\uffab\001\002\000\046\003\uffb3\004\uffb3" +
    "\005\uffb3\006\uffb3\007\uffb3\010\uffb3\013\uffb3\014\uffb3\020" +
    "\uffb3\024\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3" +
    "\060\uffb3\061\uffb3\062\uffb3\001\002\000\032\005\064\011" +
    "\101\012\073\017\105\042\076\043\102\063\077\066\067" +
    "\067\037\070\103\071\100\072\066\001\002\000\046\003" +
    "\uffb7\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7\013\uffb7" +
    "\014\uffb7\020\uffb7\024\uffb7\053\uffb7\054\uffb7\055\uffb7\056" +
    "\uffb7\057\uffb7\060\uffb7\061\uffb7\062\uffb7\001\002\000\036" +
    "\004\116\005\113\006\124\007\115\010\126\020\125\053" +
    "\131\054\111\055\114\056\123\057\121\060\127\061\130" +
    "\062\117\001\002\000\032\005\uffa6\011\uffa6\012\uffa6\017" +
    "\uffa6\042\uffa6\043\uffa6\063\uffa6\066\uffa6\067\uffa6\070\uffa6" +
    "\071\uffa6\072\uffa6\001\002\000\032\005\uffa2\011\uffa2\012" +
    "\uffa2\017\uffa2\042\uffa2\043\uffa2\063\uffa2\066\uffa2\067\uffa2" +
    "\070\uffa2\071\uffa2\072\uffa2\001\002\000\032\005\uffa4\011" +
    "\uffa4\012\uffa4\017\uffa4\042\uffa4\043\uffa4\063\uffa4\066\uffa4" +
    "\067\uffa4\070\uffa4\071\uffa4\072\uffa4\001\002\000\032\005" +
    "\uff9a\011\uff9a\012\uff9a\017\uff9a\042\uff9a\043\uff9a\063\uff9a" +
    "\066\uff9a\067\uff9a\070\uff9a\071\uff9a\072\uff9a\001\002\000" +
    "\032\005\uffa1\011\uffa1\012\uffa1\017\uffa1\042\uffa1\043\uffa1" +
    "\063\uffa1\066\uffa1\067\uffa1\070\uffa1\071\uffa1\072\uffa1\001" +
    "\002\000\032\005\uff98\011\uff98\012\uff98\017\uff98\042\uff98" +
    "\043\uff98\063\uff98\066\uff98\067\uff98\070\uff98\071\uff98\072" +
    "\uff98\001\002\000\032\005\uff9b\011\uff9b\012\uff9b\017\uff9b" +
    "\042\uff9b\043\uff9b\063\uff9b\066\uff9b\067\uff9b\070\uff9b\071" +
    "\uff9b\072\uff9b\001\002\000\032\005\uff9c\011\uff9c\012\uff9c" +
    "\017\uff9c\042\uff9c\043\uff9c\063\uff9c\066\uff9c\067\uff9c\070" +
    "\uff9c\071\uff9c\072\uff9c\001\002\000\032\005\064\011\101" +
    "\012\073\017\105\042\076\043\102\063\077\066\067\067" +
    "\037\070\103\071\100\072\066\001\002\000\032\005\uffa0" +
    "\011\uffa0\012\uffa0\017\uffa0\042\uffa0\043\uffa0\063\uffa0\066" +
    "\uffa0\067\uffa0\070\uffa0\071\uffa0\072\uffa0\001\002\000\032" +
    "\005\uffa5\011\uffa5\012\uffa5\017\uffa5\042\uffa5\043\uffa5\063" +
    "\uffa5\066\uffa5\067\uffa5\070\uffa5\071\uffa5\072\uffa5\001\002" +
    "\000\032\005\uff9f\011\uff9f\012\uff9f\017\uff9f\042\uff9f\043" +
    "\uff9f\063\uff9f\066\uff9f\067\uff9f\070\uff9f\071\uff9f\072\uff9f" +
    "\001\002\000\032\005\uff99\011\uff99\012\uff99\017\uff99\042" +
    "\uff99\043\uff99\063\uff99\066\uff99\067\uff99\070\uff99\071\uff99" +
    "\072\uff99\001\002\000\046\003\uffba\004\uffba\005\uffba\006" +
    "\uffba\007\uffba\010\uffba\013\uffba\014\uffba\020\uffba\024\uffba" +
    "\053\uffba\054\uffba\055\uffba\056\uffba\057\uffba\060\uffba\061" +
    "\uffba\062\uffba\001\002\000\032\005\uff97\011\uff97\012\uff97" +
    "\017\uff97\042\uff97\043\uff97\063\uff97\066\uff97\067\uff97\070" +
    "\uff97\071\uff97\072\uff97\001\002\000\032\005\uff9e\011\uff9e" +
    "\012\uff9e\017\uff9e\042\uff9e\043\uff9e\063\uff9e\066\uff9e\067" +
    "\uff9e\070\uff9e\071\uff9e\072\uff9e\001\002\000\032\005\uff9d" +
    "\011\uff9d\012\uff9d\017\uff9d\042\uff9d\043\uff9d\063\uff9d\066" +
    "\uff9d\067\uff9d\070\uff9d\071\uff9d\072\uff9d\001\002\000\032" +
    "\005\uffa3\011\uffa3\012\uffa3\017\uffa3\042\uffa3\043\uffa3\063" +
    "\uffa3\066\uffa3\067\uffa3\070\uffa3\071\uffa3\072\uffa3\001\002" +
    "\000\046\003\uffb8\004\116\005\113\006\124\007\115\010" +
    "\126\013\uffb8\014\uffb8\020\uffb8\024\uffb8\053\131\054\111" +
    "\055\114\056\123\057\121\060\127\061\130\062\117\001" +
    "\002\000\006\003\uffe5\013\uffe5\001\002\000\034\005\064" +
    "\011\101\012\073\017\105\020\uffbc\042\076\043\102\063" +
    "\077\066\067\067\037\070\103\071\100\072\066\001\002" +
    "\000\004\020\uffbe\001\002\000\050\003\uffb1\004\uffb1\005" +
    "\uffb1\006\uffb1\007\uffb1\010\uffb1\013\uffb1\014\uffb1\020\uffb1" +
    "\024\uffb1\044\uffb1\053\uffb1\054\uffb1\055\uffb1\056\uffb1\057" +
    "\uffb1\060\uffb1\061\uffb1\062\uffb1\001\002\000\050\003\uffb2" +
    "\004\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2\013\uffb2\014" +
    "\uffb2\020\uffb2\024\uffb2\044\uffb2\053\uffb2\054\uffb2\055\uffb2" +
    "\056\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2\001\002\000" +
    "\046\003\uffc2\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2" +
    "\013\uffc2\014\uffc2\020\uffc2\024\uffc2\053\uffc2\054\uffc2\055" +
    "\uffc2\056\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2\001\002" +
    "\000\050\003\uffb0\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010" +
    "\uffb0\013\uffb0\014\uffb0\020\uffb0\024\uffb0\044\uffb0\053\uffb0" +
    "\054\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\062" +
    "\uffb0\001\002\000\034\005\064\011\101\012\073\017\105" +
    "\020\uffbc\042\076\043\102\063\077\066\067\067\037\070" +
    "\103\071\100\072\066\001\002\000\004\067\037\001\002" +
    "\000\032\005\064\011\101\012\073\017\105\042\076\043" +
    "\102\063\077\066\067\067\037\070\103\071\100\072\066" +
    "\001\002\000\036\004\116\005\113\006\124\007\115\010" +
    "\126\024\146\053\131\054\111\055\114\056\123\057\121" +
    "\060\127\061\130\062\117\001\002\000\052\003\uffad\004" +
    "\uffad\005\uffad\006\uffad\007\uffad\010\uffad\013\uffad\014\uffad" +
    "\020\uffad\023\144\024\uffad\044\uffad\053\uffad\054\uffad\055" +
    "\uffad\056\uffad\057\uffad\060\uffad\061\uffad\062\uffad\001\002" +
    "\000\050\003\uffae\004\uffae\005\uffae\006\uffae\007\uffae\010" +
    "\uffae\013\uffae\014\uffae\020\uffae\024\uffae\044\uffae\053\uffae" +
    "\054\uffae\055\uffae\056\uffae\057\uffae\060\uffae\061\uffae\062" +
    "\uffae\001\002\000\050\003\uffac\004\uffac\005\uffac\006\uffac" +
    "\007\uffac\010\uffac\013\uffac\014\uffac\020\uffac\024\uffac\044" +
    "\uffac\053\uffac\054\uffac\055\uffac\056\uffac\057\uffac\060\uffac" +
    "\061\uffac\062\uffac\001\002\000\004\020\152\001\002\000" +
    "\046\003\uffbf\004\uffbf\005\uffbf\006\uffbf\007\uffbf\010\uffbf" +
    "\013\uffbf\014\uffbf\020\uffbf\024\uffbf\053\uffbf\054\uffbf\055" +
    "\uffbf\056\uffbf\057\uffbf\060\uffbf\061\uffbf\062\uffbf\001\002" +
    "\000\004\020\154\001\002\000\046\003\uffc0\004\uffc0\005" +
    "\uffc0\006\uffc0\007\uffc0\010\uffc0\013\uffc0\014\uffc0\020\uffc0" +
    "\024\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0\060" +
    "\uffc0\061\uffc0\062\uffc0\001\002\000\046\003\uffb9\004\116" +
    "\005\113\006\124\007\115\010\126\013\uffb9\014\uffb9\020" +
    "\uffb9\024\uffb9\053\131\054\111\055\114\056\123\057\121" +
    "\060\127\061\130\062\117\001\002\000\046\003\uffb4\004" +
    "\uffb4\005\uffb4\006\uffb4\007\uffb4\010\uffb4\013\uffb4\014\uffb4" +
    "\020\uffb4\024\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4\057" +
    "\uffb4\060\uffb4\061\uffb4\062\uffb4\001\002\000\046\003\uffc3" +
    "\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\013\uffc3\014" +
    "\uffc3\020\uffc3\024\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3" +
    "\057\uffc3\060\uffc3\061\uffc3\062\uffc3\001\002\000\006\014" +
    "\uffd9\020\uffd9\001\002\000\006\014\uffda\020\uffda\001\002" +
    "\000\004\067\037\001\002\000\010\003\uffe9\013\uffe9\044" +
    "\166\001\002\000\006\003\uffea\013\uffea\001\002\000\006" +
    "\003\uffed\013\uffed\001\002\000\004\032\167\001\002\000" +
    "\012\045\033\046\032\047\035\050\030\001\002\000\004" +
    "\023\172\001\002\000\010\003\uffe8\013\uffe8\023\175\001" +
    "\002\000\032\005\064\011\101\012\073\017\105\042\076" +
    "\043\102\063\077\066\067\067\037\070\103\071\100\072" +
    "\066\001\002\000\036\004\116\005\113\006\124\007\115" +
    "\010\126\024\174\053\131\054\111\055\114\056\123\057" +
    "\121\060\127\061\130\062\117\001\002\000\010\003\uffeb" +
    "\013\uffeb\023\uffeb\001\002\000\032\005\064\011\101\012" +
    "\073\017\105\042\076\043\102\063\077\066\067\067\037" +
    "\070\103\071\100\072\066\001\002\000\036\004\116\005" +
    "\113\006\124\007\115\010\126\024\177\053\131\054\111" +
    "\055\114\056\123\057\121\060\127\061\130\062\117\001" +
    "\002\000\010\003\uffec\013\uffec\023\uffec\001\002\000\012" +
    "\003\uffef\013\uffef\014\uffef\044\205\001\002\000\010\003" +
    "\ufff0\013\ufff0\014\ufff0\001\002\000\010\003\ufff6\013\ufff6" +
    "\014\203\001\002\000\004\067\037\001\002\000\010\003" +
    "\ufff1\013\ufff1\014\ufff1\001\002\000\032\005\064\011\101" +
    "\012\073\017\105\042\076\043\102\063\077\066\067\067" +
    "\037\070\103\071\100\072\066\001\002\000\042\003\uffee" +
    "\004\116\005\113\006\124\007\115\010\126\013\uffee\014" +
    "\uffee\053\131\054\111\055\114\056\123\057\121\060\127" +
    "\061\130\062\117\001\002\000\004\002\000\001\002\000" +
    "\004\017\211\001\002\000\004\020\212\001\002\000\004" +
    "\021\213\001\002\000\050\003\227\011\101\012\073\022" +
    "\uffd5\025\215\030\223\031\220\033\ufffa\034\ufffa\035\217" +
    "\045\ufffa\046\ufffa\047\ufffa\050\ufffa\051\010\064\230\065" +
    "\221\066\067\067\037\001\002\000\052\003\227\011\101" +
    "\012\073\022\uffd5\025\215\030\223\031\220\033\ufffa\034" +
    "\ufffa\035\217\041\uffd5\045\ufffa\046\ufffa\047\ufffa\050\ufffa" +
    "\051\010\064\230\065\221\066\067\067\037\001\002\000" +
    "\004\017\302\001\002\000\004\044\300\001\002\000\004" +
    "\021\271\001\002\000\004\017\251\001\002\000\004\017" +
    "\246\001\002\000\004\022\245\001\002\000\004\017\237" +
    "\001\002\000\004\013\236\001\002\000\004\013\235\001" +
    "\002\000\004\013\uffc6\001\002\000\052\003\uffce\011\uffce" +
    "\012\uffce\022\uffce\025\uffce\030\uffce\031\uffce\033\uffce\034" +
    "\uffce\035\uffce\041\uffce\045\uffce\046\uffce\047\uffce\050\uffce" +
    "\051\uffce\064\uffce\065\uffce\066\uffce\067\uffce\001\002\000" +
    "\004\017\232\001\002\000\004\013\uffc7\001\002\000\032" +
    "\005\064\011\101\012\073\017\105\042\076\043\102\063" +
    "\077\066\067\067\037\070\103\071\100\072\066\001\002" +
    "\000\036\004\116\005\113\006\124\007\115\010\126\020" +
    "\234\053\131\054\111\055\114\056\123\057\121\060\127" +
    "\061\130\062\117\001\002\000\004\013\uffc5\001\002\000" +
    "\052\003\uffd1\011\uffd1\012\uffd1\022\uffd1\025\uffd1\030\uffd1" +
    "\031\uffd1\033\uffd1\034\uffd1\035\uffd1\041\uffd1\045\uffd1\046" +
    "\uffd1\047\uffd1\050\uffd1\051\uffd1\064\uffd1\065\uffd1\066\uffd1" +
    "\067\uffd1\001\002\000\052\003\uffd2\011\uffd2\012\uffd2\022" +
    "\uffd2\025\uffd2\030\uffd2\031\uffd2\033\uffd2\034\uffd2\035\uffd2" +
    "\041\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2\064" +
    "\uffd2\065\uffd2\066\uffd2\067\uffd2\001\002\000\032\005\064" +
    "\011\101\012\073\017\105\042\076\043\102\063\077\066" +
    "\067\067\037\070\103\071\100\072\066\001\002\000\036" +
    "\004\116\005\113\006\124\007\115\010\126\020\241\053" +
    "\131\054\111\055\114\056\123\057\121\060\127\061\130" +
    "\062\117\001\002\000\004\021\242\001\002\000\050\003" +
    "\227\011\101\012\073\022\uffd5\025\215\030\223\031\220" +
    "\033\ufffa\034\ufffa\035\217\045\ufffa\046\ufffa\047\ufffa\050" +
    "\ufffa\051\010\064\230\065\221\066\067\067\037\001\002" +
    "\000\004\022\244\001\002\000\052\003\uffd3\011\uffd3\012" +
    "\uffd3\022\uffd3\025\uffd3\030\uffd3\031\uffd3\033\uffd3\034\uffd3" +
    "\035\uffd3\041\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\051" +
    "\uffd3\064\uffd3\065\uffd3\066\uffd3\067\uffd3\001\002\000\004" +
    "\002\uff93\001\002\000\032\005\064\011\101\012\073\017" +
    "\105\042\076\043\102\063\077\066\067\067\037\070\103" +
    "\071\100\072\066\001\002\000\036\004\116\005\113\006" +
    "\124\007\115\010\126\020\250\053\131\054\111\055\114" +
    "\056\123\057\121\060\127\061\130\062\117\001\002\000" +
    "\004\013\uffc4\001\002\000\020\033\ufffa\034\ufffa\045\ufffa" +
    "\046\ufffa\047\ufffa\050\ufffa\051\010\001\002\000\004\013" +
    "\253\001\002\000\032\005\064\011\101\012\073\017\105" +
    "\042\076\043\102\063\077\066\067\067\037\070\103\071" +
    "\100\072\066\001\002\000\036\004\116\005\113\006\124" +
    "\007\115\010\126\013\255\053\131\054\111\055\114\056" +
    "\123\057\121\060\127\061\130\062\117\001\002\000\010" +
    "\011\101\012\073\067\037\001\002\000\010\011\101\012" +
    "\073\044\266\001\002\000\004\020\262\001\002\000\004" +
    "\067\037\001\002\000\004\020\uffcd\001\002\000\004\021" +
    "\263\001\002\000\050\003\227\011\101\012\073\022\uffd5" +
    "\025\215\030\223\031\220\033\ufffa\034\ufffa\035\217\045" +
    "\ufffa\046\ufffa\047\ufffa\050\ufffa\051\010\064\230\065\221" +
    "\066\067\067\037\001\002\000\004\022\265\001\002\000" +
    "\052\003\uffd0\011\uffd0\012\uffd0\022\uffd0\025\uffd0\030\uffd0" +
    "\031\uffd0\033\uffd0\034\uffd0\035\uffd0\041\uffd0\045\uffd0\046" +
    "\uffd0\047\uffd0\050\uffd0\051\uffd0\064\uffd0\065\uffd0\066\uffd0" +
    "\067\uffd0\001\002\000\032\005\064\011\101\012\073\017" +
    "\105\042\076\043\102\063\077\066\067\067\037\070\103" +
    "\071\100\072\066\001\002\000\004\020\uffcc\001\002\000" +
    "\036\004\116\005\113\006\124\007\115\010\126\020\uffcb" +
    "\053\131\054\111\055\114\056\123\057\121\060\127\061" +
    "\130\062\117\001\002\000\050\003\227\011\101\012\073" +
    "\022\uffd5\025\215\030\223\031\220\033\ufffa\034\ufffa\035" +
    "\217\045\ufffa\046\ufffa\047\ufffa\050\ufffa\051\010\064\230" +
    "\065\221\066\067\067\037\001\002\000\004\022\273\001" +
    "\002\000\004\036\274\001\002\000\004\017\275\001\002" +
    "\000\032\005\064\011\101\012\073\017\105\042\076\043" +
    "\102\063\077\066\067\067\037\070\103\071\100\072\066" +
    "\001\002\000\036\004\116\005\113\006\124\007\115\010" +
    "\126\020\277\053\131\054\111\055\114\056\123\057\121" +
    "\060\127\061\130\062\117\001\002\000\052\003\uffcf\011" +
    "\uffcf\012\uffcf\022\uffcf\025\uffcf\030\uffcf\031\uffcf\033\uffcf" +
    "\034\uffcf\035\uffcf\041\uffcf\045\uffcf\046\uffcf\047\uffcf\050" +
    "\uffcf\051\uffcf\064\uffcf\065\uffcf\066\uffcf\067\uffcf\001\002" +
    "\000\032\005\064\011\101\012\073\017\105\042\076\043" +
    "\102\063\077\066\067\067\037\070\103\071\100\072\066" +
    "\001\002\000\036\004\116\005\113\006\124\007\115\010" +
    "\126\013\uffbb\053\131\054\111\055\114\056\123\057\121" +
    "\060\127\061\130\062\117\001\002\000\032\005\064\011" +
    "\101\012\073\017\105\042\076\043\102\063\077\066\067" +
    "\067\037\070\103\071\100\072\066\001\002\000\036\004" +
    "\116\005\113\006\124\007\115\010\126\020\304\053\131" +
    "\054\111\055\114\056\123\057\121\060\127\061\130\062" +
    "\117\001\002\000\004\021\305\001\002\000\050\003\227" +
    "\011\101\012\073\022\uffd5\025\215\030\223\031\220\033" +
    "\ufffa\034\ufffa\035\217\045\ufffa\046\ufffa\047\ufffa\050\ufffa" +
    "\051\010\064\230\065\221\066\067\067\037\001\002\000" +
    "\004\022\307\001\002\000\056\003\uffc8\011\uffc8\012\uffc8" +
    "\022\uffc8\025\uffc8\026\311\027\312\030\uffc8\031\uffc8\033" +
    "\uffc8\034\uffc8\035\uffc8\041\uffc8\045\uffc8\046\uffc8\047\uffc8" +
    "\050\uffc8\051\uffc8\064\uffc8\065\uffc8\066\uffc8\067\uffc8\001" +
    "\002\000\052\003\uffd4\011\uffd4\012\uffd4\022\uffd4\025\uffd4" +
    "\030\uffd4\031\uffd4\033\uffd4\034\uffd4\035\uffd4\041\uffd4\045" +
    "\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\064\uffd4\065\uffd4" +
    "\066\uffd4\067\uffd4\001\002\000\004\021\322\001\002\000" +
    "\004\017\313\001\002\000\032\005\064\011\101\012\073" +
    "\017\105\042\076\043\102\063\077\066\067\067\037\070" +
    "\103\071\100\072\066\001\002\000\036\004\116\005\113" +
    "\006\124\007\115\010\126\020\315\053\131\054\111\055" +
    "\114\056\123\057\121\060\127\061\130\062\117\001\002" +
    "\000\004\021\316\001\002\000\050\003\227\011\101\012" +
    "\073\022\uffd5\025\215\030\223\031\220\033\ufffa\034\ufffa" +
    "\035\217\045\ufffa\046\ufffa\047\ufffa\050\ufffa\051\010\064" +
    "\230\065\221\066\067\067\037\001\002\000\004\022\320" +
    "\001\002\000\056\003\uffc8\011\uffc8\012\uffc8\022\uffc8\025" +
    "\uffc8\026\311\027\312\030\uffc8\031\uffc8\033\uffc8\034\uffc8" +
    "\035\uffc8\041\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051" +
    "\uffc8\064\uffc8\065\uffc8\066\uffc8\067\uffc8\001\002\000\052" +
    "\003\uffc9\011\uffc9\012\uffc9\022\uffc9\025\uffc9\030\uffc9\031" +
    "\uffc9\033\uffc9\034\uffc9\035\uffc9\041\uffc9\045\uffc9\046\uffc9" +
    "\047\uffc9\050\uffc9\051\uffc9\064\uffc9\065\uffc9\066\uffc9\067" +
    "\uffc9\001\002\000\050\003\227\011\101\012\073\022\uffd5" +
    "\025\215\030\223\031\220\033\ufffa\034\ufffa\035\217\045" +
    "\ufffa\046\ufffa\047\ufffa\050\ufffa\051\010\064\230\065\221" +
    "\066\067\067\037\001\002\000\004\022\324\001\002\000" +
    "\052\003\uffca\011\uffca\012\uffca\022\uffca\025\uffca\030\uffca" +
    "\031\uffca\033\uffca\034\uffca\035\uffca\041\uffca\045\uffca\046" +
    "\uffca\047\uffca\050\uffca\051\uffca\064\uffca\065\uffca\066\uffca" +
    "\067\uffca\001\002\000\006\022\uffd6\041\uffd6\001\002\000" +
    "\004\017\327\001\002\000\020\020\uffdd\033\045\034\046" +
    "\045\033\046\032\047\035\050\030\001\002\000\004\020" +
    "\331\001\002\000\004\015\332\001\002\000\012\045\033" +
    "\046\032\047\035\050\030\001\002\000\004\021\334\001" +
    "\002\000\050\003\227\011\101\012\073\025\215\030\223" +
    "\031\220\033\ufffa\034\ufffa\035\217\041\uffd5\045\ufffa\046" +
    "\ufffa\047\ufffa\050\ufffa\051\010\064\230\065\221\066\067" +
    "\067\037\001\002\000\004\041\336\001\002\000\032\005" +
    "\064\011\101\012\073\017\105\042\076\043\102\063\077" +
    "\066\067\067\037\070\103\071\100\072\066\001\002\000" +
    "\036\004\116\005\113\006\124\007\115\010\126\013\340" +
    "\053\131\054\111\055\114\056\123\057\121\060\127\061" +
    "\130\062\117\001\002\000\004\022\341\001\002\000\010" +
    "\037\uffdf\040\uffdf\052\uffdf\001\002\000\004\017\343\001" +
    "\002\000\020\020\uffdd\033\045\034\046\045\033\046\032" +
    "\047\035\050\030\001\002\000\004\020\345\001\002\000" +
    "\004\021\346\001\002\000\050\003\227\011\101\012\073" +
    "\022\uffd5\025\215\030\223\031\220\033\ufffa\034\ufffa\035" +
    "\217\045\ufffa\046\ufffa\047\ufffa\050\ufffa\051\010\064\230" +
    "\065\221\066\067\067\037\001\002\000\004\022\350\001" +
    "\002\000\010\037\uffe0\040\uffe0\052\uffe0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\346\000\006\002\004\003\003\001\001\000\016\004" +
    "\015\005\014\024\012\025\016\026\013\027\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\061\341\001\001\000\004\061\325" +
    "\001\001\000\004\060\206\001\001\000\002\001\001\000" +
    "\014\006\024\007\025\010\022\013\023\017\030\001\001" +
    "\000\002\001\001\000\012\024\017\025\016\026\013\027" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\201\012\200\061\177\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\161\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\061\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\010\040\030\043\031\042\032\046\033\041\001\001" +
    "\000\004\061\160\001\001\000\004\061\157\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\010\040\031" +
    "\050\032\046\033\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\020\055\021\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\041\103\042\073\043\074\045" +
    "\071\046\105\047\062\051\067\056\064\057\061\061\070" +
    "\001\001\000\004\061\156\001\001\000\002\001\001\000" +
    "\020\041\103\042\073\046\155\047\062\051\067\057\061" +
    "\061\070\001\001\000\024\041\103\042\073\045\154\046" +
    "\105\047\062\051\067\056\064\057\061\061\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\022\135\023\140\050\136\057\137\001\001\000\012" +
    "\052\117\053\121\054\111\055\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\041\103\042\073\045\106\046\105\047\062\051\067\056" +
    "\064\057\061\061\070\001\001\000\002\001\001\000\012" +
    "\052\117\053\121\054\111\055\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\041\103\042\073\045\131\046\105" +
    "\047\062\051\067\056\064\057\061\061\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\052\117" +
    "\053\121\054\111\055\107\001\001\000\002\001\001\000" +
    "\026\041\103\042\073\043\134\045\071\046\105\047\062" +
    "\051\067\056\064\057\061\061\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\041\103\042\073\043\150\045" +
    "\071\046\105\047\062\051\067\056\064\057\061\061\070" +
    "\001\001\000\004\061\147\001\001\000\024\041\103\042" +
    "\073\045\144\046\105\047\062\051\067\056\064\057\061" +
    "\061\070\001\001\000\012\052\117\053\121\054\111\055" +
    "\107\001\001\000\004\022\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\052\117\053\121" +
    "\054\111\055\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\061\162" +
    "\001\001\000\006\015\164\016\163\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\167" +
    "\001\001\000\004\014\170\001\001\000\002\001\001\000" +
    "\024\041\103\042\073\045\172\046\105\047\062\051\067" +
    "\056\064\057\061\061\070\001\001\000\012\052\117\053" +
    "\121\054\111\055\107\001\001\000\002\001\001\000\024" +
    "\041\103\042\073\045\175\046\105\047\062\051\067\056" +
    "\064\057\061\061\070\001\001\000\012\052\117\053\121" +
    "\054\111\055\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\203" +
    "\061\177\001\001\000\002\001\001\000\024\041\103\042" +
    "\073\045\205\046\105\047\062\051\067\056\064\057\061" +
    "\061\070\001\001\000\012\052\117\053\121\054\111\055" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\004\223\005\014\034" +
    "\221\035\213\040\224\041\230\042\073\044\225\047\215" +
    "\057\061\061\070\001\001\000\030\004\223\005\014\034" +
    "\324\035\213\040\224\041\230\042\073\044\225\047\215" +
    "\057\061\061\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\041\103\042\073\045" +
    "\232\046\105\047\062\051\067\056\064\057\061\061\070" +
    "\001\001\000\012\052\117\053\121\054\111\055\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\041\103\042\073\045\237\046\105\047\062\051" +
    "\067\056\064\057\061\061\070\001\001\000\012\052\117" +
    "\053\121\054\111\055\107\001\001\000\002\001\001\000" +
    "\030\004\223\005\014\034\242\035\213\040\224\041\230" +
    "\042\073\044\225\047\215\057\061\061\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\041\103\042\073\045\246\046\105\047\062\051\067\056" +
    "\064\057\061\061\070\001\001\000\012\052\117\053\121" +
    "\054\111\055\107\001\001\000\002\001\001\000\006\004" +
    "\251\005\014\001\001\000\002\001\001\000\024\041\103" +
    "\042\073\045\253\046\105\047\062\051\067\056\064\057" +
    "\061\061\070\001\001\000\012\052\117\053\121\054\111" +
    "\055\107\001\001\000\010\036\256\057\257\061\255\001" +
    "\001\000\004\057\266\001\001\000\002\001\001\000\004" +
    "\061\260\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\004\223\005\014\034\263\035\213\040\224\041\230" +
    "\042\073\044\225\047\215\057\061\061\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\041\103\042\073" +
    "\045\267\046\105\047\062\051\067\056\064\057\061\061" +
    "\070\001\001\000\002\001\001\000\012\052\117\053\121" +
    "\054\111\055\107\001\001\000\030\004\223\005\014\034" +
    "\271\035\213\040\224\041\230\042\073\044\225\047\215" +
    "\057\061\061\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\041\103\042\073\045\275" +
    "\046\105\047\062\051\067\056\064\057\061\061\070\001" +
    "\001\000\012\052\117\053\121\054\111\055\107\001\001" +
    "\000\002\001\001\000\024\041\103\042\073\045\300\046" +
    "\105\047\062\051\067\056\064\057\061\061\070\001\001" +
    "\000\012\052\117\053\121\054\111\055\107\001\001\000" +
    "\024\041\103\042\073\045\302\046\105\047\062\051\067" +
    "\056\064\057\061\061\070\001\001\000\012\052\117\053" +
    "\121\054\111\055\107\001\001\000\002\001\001\000\030" +
    "\004\223\005\014\034\305\035\213\040\224\041\230\042" +
    "\073\044\225\047\215\057\061\061\070\001\001\000\002" +
    "\001\001\000\004\037\307\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\041\103\042\073" +
    "\045\313\046\105\047\062\051\067\056\064\057\061\061" +
    "\070\001\001\000\012\052\117\053\121\054\111\055\107" +
    "\001\001\000\002\001\001\000\030\004\223\005\014\034" +
    "\316\035\213\040\224\041\230\042\073\044\225\047\215" +
    "\057\061\061\070\001\001\000\002\001\001\000\004\037" +
    "\320\001\001\000\002\001\001\000\030\004\223\005\014" +
    "\034\322\035\213\040\224\041\230\042\073\044\225\047" +
    "\215\057\061\061\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\010" +
    "\040\030\327\031\042\032\046\033\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\332\001\001\000" +
    "\002\001\001\000\030\004\223\005\014\034\334\035\213" +
    "\040\224\041\230\042\073\044\225\047\215\057\061\061" +
    "\070\001\001\000\002\001\001\000\024\041\103\042\073" +
    "\045\336\046\105\047\062\051\067\056\064\057\061\061" +
    "\070\001\001\000\012\052\117\053\121\054\111\055\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\010\040\030\343\031\042\032\046\033\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\004" +
    "\223\005\014\034\346\035\213\040\224\041\230\042\073" +
    "\044\225\047\215\057\061\061\070\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**********************************************************************
     * sobrecàrrega de mètodes per gestionar els errors que es localitzin *
     **********************************************************************/
    int numberErrors = 0;
    BufferedWriter bf;

    final String ERROR_FILE = "errors.txt";

    private MVP mvp = null;

    public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf, MVP mvp) {
        super(s,sf);
        this.mvp = mvp;
    }

    public int getNumberErrors() {
        return numberErrors;
    }

    public MVP getMVP(){
        return this.mvp;
    }

    @Override
    public void report_error(String message, Object info) {
        numberErrors++;
        StringBuilder msg = new StringBuilder("");
        if ((info != null) && (info instanceof java_cup.runtime.Symbol)) {
            ComplexSymbol token = (ComplexSymbol)info;
            Location l = token.getLeft();

            if (l != null) {
                msg.append(message + " on ")
                   .append("row: ")
                   .append(l.getLine())
                   .append(", column: ")
                   .append(l.getColumn())
                   .append('\n');
            }
        }
        if ((info != null) && (info instanceof BaseNode)) {
            BaseNode node = (BaseNode)info;
            
            msg.append("SEMANTIC ERROR: ")
                .append(message + " on ")
                .append("row: ")
                .append(node.getLine())
                .append(", column: ")
                .append(node.getColumn())
                .append("\n");
        }
        //msg.append(": ").append(message);

        if(numberErrors==1){
            try {
                //És el primer error detectat
                bf = new BufferedWriter(new FileWriter(ERROR_FILE));
            } catch (IOException ex) {
            }
        }

        try {
            bf.write(msg.toString()+"\n");
        } catch (IOException ex) {
        }

        if (mvp.semantic() && !mvp.sintactic()) {
            mvp.semanticError(msg);
        } else {
            mvp.sintacticError(msg);
        }
    }

    @Override
    public void report_fatal_error(String message, Object info) throws Exception {
        mvp.sintactic(true);
        report_error("FATAL ERROR: ("+message+")"+'\n', info);
        done_parsing();
        mvp.sintactic(false);
    }

    @Override
    public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws Exception {
        mvp.sintactic(true);
        report_error("FATAL SINTACTIC ERROR: unexpected "+ParserSym.terminalNames[cur_token.sym]+'\n', cur_token);
        done_parsing();
        mvp.sintactic(false);
    }

    @Override
    public void syntax_error(java_cup.runtime.Symbol cur_token) {
        mvp.sintactic(true);
        report_error("SINTACTIC ERROR: Unexpected "+ParserSym.terminalNames[cur_token.sym]+'\n', cur_token);
        mvp.sintactic(false);
    }

    private int extractLine(ComplexSymbol symbol) {
        Location l = symbol.getLeft();
        if(l != null) {
            return l.getLine();
        }
        return 0;
    }

    private int extractColumn(ComplexSymbol symbol) {
        Location l = symbol.getLeft();
        if(l != null) {
            return l.getColumn();
        }
        return 0;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAM EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ProgramNode start_val = (ProgramNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAM ::= DECL_LIST METHOD_LIST MAIN 
            {
              ProgramNode RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DeclListNode dl = (DeclListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		MethodListNode ml = (MethodListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		MainNode m = (MainNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ProgramNode(dl, ml, m, m.getLine(), m.getColumn());                                     
                                                                                                                                                                                         analisisSemantico sem = new analisisSemantico(RESULT, parser); if(numberErrors == 0){sem.handleProgram();} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECL_LIST ::= DECL_LIST DECL sym_semicolon 
            {
              DeclListNode RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DeclListNode dl = (DeclListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DeclNode d = (DeclNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new DeclListNode(dl, d, d.getLine(), d.getColumn());                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_LIST",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECL_LIST ::= DECL_LIST DECL error 
            {
              DeclListNode RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DeclListNode dl = (DeclListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DeclNode d = (DeclNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new DeclListNode();                                                                         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_LIST",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECL_LIST ::= 
            {
              DeclListNode RESULT =null;
		 RESULT = new DeclListNode();                                                                         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_LIST",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECL ::= MODIFIER ACTUAL_DECL 
            {
              DeclNode RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ModifierNode m = (ModifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int adleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int adright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ActualDeclNode ad = (ActualDeclNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DeclNode(m, ad, ad.getLine(), ad.getColumn());                                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // MODIFIER ::= r_const 
            {
              ModifierNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol c = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ModifierNode(TipoDescripcion.dconst, true, extractLine(c), extractColumn(c));           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIFIER",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MODIFIER ::= 
            {
              ModifierNode RESULT =null;
		 RESULT = new ModifierNode(TipoDescripcion.dvar, false, 0, 0);                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIFIER",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ACTUAL_DECL ::= DECL_ELEM 
            {
              ActualDeclNode RESULT =null;
		int deleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int deright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DeclElemNode de = (DeclElemNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ActualDeclNode(de, null, null, de.getLine(), de.getColumn());                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ACTUAL_DECL",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ACTUAL_DECL ::= DECL_ARRAY 
            {
              ActualDeclNode RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DeclArrayNode da = (DeclArrayNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ActualDeclNode(null, da, null, da.getLine(), da.getColumn());                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ACTUAL_DECL",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ACTUAL_DECL ::= DECL_TUPEL 
            {
              ActualDeclNode RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DeclTupelNode dt = (DeclTupelNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ActualDeclNode(null, null, dt, dt.getLine(), dt.getColumn());                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ACTUAL_DECL",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECL_ELEM ::= TYPE_ID ELEM_LIST 
            {
              DeclElemNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeIdNode t = (TypeIdNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ElemListNode el = (ElemListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DeclElemNode(t, el, t.getLine(), t.getColumn());                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_ELEM",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TYPE_ID ::= r_int 
            {
              TypeIdNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol t = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeIdNode(TypeEnum.INT, extractLine(t), extractColumn(t));                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE_ID",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TYPE_ID ::= r_char 
            {
              TypeIdNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol t = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeIdNode(TypeEnum.CHAR, extractLine(t), extractColumn(t));                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE_ID",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TYPE_ID ::= r_bool 
            {
              TypeIdNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol t = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeIdNode(TypeEnum.BOOL, extractLine(t), extractColumn(t));                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE_ID",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TYPE_ID ::= r_string 
            {
              TypeIdNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol t = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeIdNode(TypeEnum.STRING, extractLine(t), extractColumn(t));                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE_ID",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ELEM_LIST ::= ELEM_LIST sym_comma ELEM_ID_ASSIG 
            {
              ElemListNode RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ElemListNode el = (ElemListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ElemIdAssigNode ea = (ElemIdAssigNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ElemListNode(el, ea, el.getLine(), el.getColumn());                                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELEM_LIST",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ELEM_LIST ::= ELEM_ID_ASSIG 
            {
              ElemListNode RESULT =null;
		int eialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eiaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ElemIdAssigNode eia = (ElemIdAssigNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ElemListNode(null, eia, eia.getLine(), eia.getColumn());                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELEM_LIST",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ELEM_ID_ASSIG ::= ID 
            {
              ElemIdAssigNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ElemIdAssigNode(null, id, id.getLine(), id.getColumn());                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELEM_ID_ASSIG",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ELEM_ID_ASSIG ::= ID sym_eq EXP 
            {
              ElemIdAssigNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode exp = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ElemIdAssigNode(exp, id, id.getLine(), id.getColumn());                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELEM_ID_ASSIG",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECL_ARRAY ::= r_array TYPE_ID ID ARRAY_DECL 
            {
              DeclArrayNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ComplexSymbol r = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TypeIdNode tid = (TypeIdNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int adleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int adright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayDeclNode ad = (ArrayDeclNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DeclArrayNode(tid, id, ad, extractLine(r), extractColumn(r));                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_ARRAY",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DIM_ARRAY ::= DIM_ARRAY sym_lbracket EXP sym_rbracket 
            {
              DimArrayNode RESULT =null;
		int dimleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		DimArrayNode dim = (DimArrayNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new DimArrayNode(dim, e, extractLine(dim), extractColumn(dim));                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DIM_ARRAY",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DIM_ARRAY ::= sym_lbracket EXP sym_rbracket 
            {
              DimArrayNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ComplexSymbol s = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new DimArrayNode(null, e, extractLine(s), extractColumn(s));                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DIM_ARRAY",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ARRAY_DECL ::= INIT_ARRAY 
            {
              ArrayDeclNode RESULT =null;
		int ialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InitArrayNode ia = (InitArrayNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayDeclNode(ia, ia.getLine(), ia.getColumn());                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAY_DECL",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ARRAY_DECL ::= 
            {
              ArrayDeclNode RESULT =null;
		 RESULT = new ArrayDeclNode();                                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAY_DECL",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INIT_ARRAY ::= sym_eq r_new TYPE_ID DIM_ARRAY 
            {
              InitArrayNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ComplexSymbol e = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeIdNode t = (TypeIdNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int daleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DimArrayNode da = (DimArrayNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InitArrayNode(t, da, extractLine(da), extractColumn(da));                               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT_ARRAY",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECL_TUPEL ::= r_tupel ID sym_lparen PARAM_LIST sym_rparen TUPEL_DECL 
            {
              DeclTupelNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ComplexSymbol r = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParamListNode pl = (ParamListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TupelDeclNode td = (TupelDeclNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DeclTupelNode(id, pl, td, extractLine(r), extractColumn(r));                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_TUPEL",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TUPEL_DECL ::= INIT_TUPEL 
            {
              TupelDeclNode RESULT =null;
		int itleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int itright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InitTupelNode it = (InitTupelNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TupelDeclNode(it, it.getLine(), it.getColumn());                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TUPEL_DECL",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INIT_TUPEL ::= sym_eq r_new r_tupel sym_lparen PARAM_IN sym_rparen 
            {
              InitTupelNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ComplexSymbol r = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ParamInNode pi = (ParamInNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new  InitTupelNode(pi, extractLine(r), extractColumn(r));                                   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT_TUPEL",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // METHOD_LIST ::= METHOD METHOD_LIST 
            {
              MethodListNode RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		MethodNode m = (MethodNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		MethodListNode ml = (MethodListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MethodListNode(m, ml, m.getLine(), m.getColumn());                                      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METHOD_LIST",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // METHOD_LIST ::= 
            {
              MethodListNode RESULT =null;
		 RESULT = new MethodListNode();                                                                       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METHOD_LIST",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // METHOD ::= PROC 
            {
              MethodNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ProcNode p = (ProcNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MethodNode(p, null, p.getLine(), p.getColumn());                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METHOD",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // METHOD ::= FUNC 
            {
              MethodNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FuncNode f = (FuncNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MethodNode(null, f, f.getLine(), f.getColumn());                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METHOD",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PROC ::= r_procedure ID sym_lparen PARAM_LIST sym_rparen sym_lcbracket SENTENCE_LIST sym_rcbracket 
            {
              ProcNode RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		ComplexSymbol m = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ParamListNode pl = (ParamListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SentenceListNode sl = (SentenceListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ProcNode(pl, sl, id, extractLine(m), extractColumn(m));                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROC",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FUNC ::= r_function ID sym_lparen PARAM_LIST sym_rparen sym_colon TYPE_ID sym_lcbracket SENTENCE_LIST r_return EXP sym_semicolon sym_rcbracket 
            {
              FuncNode RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		ComplexSymbol m = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		ParamListNode pl = (ParamListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		TypeIdNode t = (TypeIdNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SentenceListNode sl = (SentenceListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode exp = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new FuncNode(id, pl, t, sl, exp, extractLine(m), extractColumn(m));                         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNC",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PARAM_LIST ::= ACTUAL_PARAM_LIST 
            {
              ParamListNode RESULT =null;
		int aplleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aplright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ActualParamListNode apl = (ActualParamListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ParamListNode(apl, apl.getLine(), apl.getColumn());                                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM_LIST",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PARAM_LIST ::= 
            {
              ParamListNode RESULT =null;
		 RESULT = new ParamListNode();                                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM_LIST",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ACTUAL_PARAM_LIST ::= PARAM 
            {
              ActualParamListNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParamNode p = (ParamNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ActualParamListNode(p, null, p.getLine(), p.getColumn());                               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ACTUAL_PARAM_LIST",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ACTUAL_PARAM_LIST ::= PARAM sym_comma ACTUAL_PARAM_LIST 
            {
              ActualParamListNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParamNode p = (ParamNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aplleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aplright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ActualParamListNode apl = (ActualParamListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ActualParamListNode(p, apl, p.getLine(), p.getColumn());                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ACTUAL_PARAM_LIST",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PARAM ::= TYPE_ID ID 
            {
              ParamNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeIdNode t = (TypeIdNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ParamNode(t, null, id, t.getLine(), t.getColumn());                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PARAM ::= SPECIAL_PARAM ID 
            {
              ParamNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SpecialParamNode t = (SpecialParamNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ParamNode(null, t, id, t.getLine(), t.getColumn());                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SPECIAL_PARAM ::= r_tupel 
            {
              SpecialParamNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol t = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SpecialParamNode(TypeEnum.TUPEL, null, extractLine(t), extractColumn(t));                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SPECIAL_PARAM",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SPECIAL_PARAM ::= r_array TYPE_ID 
            {
              SpecialParamNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ComplexSymbol t = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeIdNode tid = (TypeIdNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SpecialParamNode(TypeEnum.ARRAY, tid, extractLine(t), extractColumn(t));                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SPECIAL_PARAM",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCE_LIST ::= SENTENCE SENTENCE_LIST 
            {
              SentenceListNode RESULT =null;
		int sentenceleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentenceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SentenceNode sentence = (SentenceNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sentence_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentence_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SentenceListNode sentence_list = (SentenceListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SentenceListNode(sentence, sentence_list, sentence.getLine(), sentence.getColumn());    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCE_LIST",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCE_LIST ::= 
            {
              SentenceListNode RESULT =null;
		 RESULT = new SentenceListNode();                                                                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCE_LIST",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCE ::= r_if sym_lparen EXP sym_rparen sym_lcbracket SENTENCE_LIST sym_rcbracket NEXT_IF 
            {
              SentenceNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		ComplexSymbol v = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ExpressionNode exp = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sentenceleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sentenceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SentenceListNode sentence = (SentenceListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NextIfNode si = (NextIfNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SentenceNode(null, null, exp, sentence, si,null, SentenceType.IF, extractLine(v), extractColumn(v)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCE ::= r_while sym_lparen EXP sym_rparen sym_lcbracket SENTENCE_LIST sym_rcbracket 
            {
              SentenceNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		ComplexSymbol v = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ExpressionNode exp = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sentenceleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentenceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SentenceListNode sentence = (SentenceListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SentenceNode(null, null, exp, sentence, null,null, SentenceType.WHILE, extractLine(v), extractColumn(v)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCE ::= DECL sym_semicolon 
            {
              SentenceNode RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DeclNode decl = (DeclNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SentenceNode(decl, null, null, null, null,null,  SentenceType.DECL, decl.getLine(), decl.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCE ::= INST sym_semicolon 
            {
              SentenceNode RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		InstNode inst = (InstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SentenceNode(null, inst, null, null, null,null,  SentenceType.INST, inst.getLine(), inst.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCE ::= r_for sym_lparen DECL sym_semicolon EXP sym_semicolon FOR_INST sym_rparen sym_lcbracket SENTENCE_LIST sym_rcbracket 
            {
              SentenceNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		ComplexSymbol v = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int declleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		DeclNode decl = (DeclNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		ExpressionNode exp = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ForInstNode inst = (ForInstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SentenceListNode sl = (SentenceListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SentenceNode(decl, null, exp, sl, null,inst, SentenceType.FOR, extractLine(v), extractColumn(v)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCE ::= r_repeat sym_lcbracket SENTENCE_LIST sym_rcbracket r_until sym_lparen EXP sym_rparen 
            {
              SentenceNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		ComplexSymbol v = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		SentenceListNode sl = (SentenceListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionNode exp = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SentenceNode(null, null, exp, sl, null, null, SentenceType.REPEAT, extractLine(v), extractColumn(v)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCE ::= error 
            {
              SentenceNode RESULT =null;
		 RESULT = new SentenceNode(null, null, null, null, null,null, SentenceType.NONE, 0, 0);               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FOR_INST ::= SPECIAL_OP ID 
            {
              ForInstNode RESULT =null;
		int espleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int espright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SpecialOpNode esp = (SpecialOpNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IdentifierNode v = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ForInstNode(esp,null,v, v.getLine(), v.getColumn());                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_INST",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FOR_INST ::= ID SPECIAL_OP 
            {
              ForInstNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		IdentifierNode v = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int espleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int espright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SpecialOpNode esp = (SpecialOpNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ForInstNode(esp,null,v, v.getLine(), v.getColumn());                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_INST",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FOR_INST ::= ID sym_eq EXP 
            {
              ForInstNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		IdentifierNode v = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode exp = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ForInstNode(null,exp,v, v.getLine(), v.getColumn());                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_INST",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NEXT_IF ::= r_else sym_lcbracket SENTENCE_LIST sym_rcbracket 
            {
              NextIfNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ComplexSymbol r = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SentenceListNode v = (SentenceListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NextIfNode(v,null,null, extractLine(r), extractColumn(r));                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NEXT_IF",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NEXT_IF ::= r_elif sym_lparen EXP sym_rparen sym_lcbracket SENTENCE_LIST sym_rcbracket NEXT_IF 
            {
              NextIfNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		ComplexSymbol r = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ExpressionNode exp = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SentenceListNode sents = (SentenceListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nextleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nextright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NextIfNode next = (NextIfNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NextIfNode(sents,exp,next, extractLine(r), extractColumn(r));                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NEXT_IF",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NEXT_IF ::= 
            {
              NextIfNode RESULT =null;
		 RESULT = new NextIfNode();                                                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NEXT_IF",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // INST ::= INST_EXP 
            {
              InstNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InstExpNode v = (InstExpNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstNode(v, null,null, InstType.EXP, v.getLine(), v.getColumn());                       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // INST ::= ASSIG 
            {
              InstNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AssigNode v = (AssigNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstNode(null, v,null, InstType.ASSIG, v.getLine(), v.getColumn());                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // INST ::= r_print sym_lparen EXP sym_rparen 
            {
              InstNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ComplexSymbol v = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionNode exp = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new InstNode(null, null,exp, InstType.PRINT, exp.getLine(), exp.getColumn());               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // INST ::= r_println sym_lparen EXP sym_rparen 
            {
              InstNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ComplexSymbol v = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionNode exp = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new InstNode(null, null,exp, InstType.PRINTLN, exp.getLine(), exp.getColumn());             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // INST_EXP ::= SPECIAL_OP ID 
            {
              InstExpNode RESULT =null;
		int op_espleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int op_espright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SpecialOpNode op_esp = (SpecialOpNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstExpNode(op_esp, null, id, false, id.getLine(), id.getColumn());                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST_EXP",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // INST_EXP ::= ID SPECIAL_OP 
            {
              InstExpNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int op_espleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op_espright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SpecialOpNode op_esp = (SpecialOpNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstExpNode(op_esp, null, id, false, id.getLine(), id.getColumn());                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST_EXP",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // INST_EXP ::= METHOD_CALL 
            {
              InstExpNode RESULT =null;
		int m_callleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int m_callright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		MethodCallNode m_call = (MethodCallNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstExpNode(null, m_call, null, false, m_call.getLine(), m_call.getColumn());           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST_EXP",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // INST_EXP ::= r_read sym_lparen sym_rparen 
            {
              InstExpNode RESULT =null;
		int readleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int readright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ComplexSymbol read = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new InstExpNode(null, null, null, true, extractLine(read), extractColumn(read));            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST_EXP",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // METHOD_CALL ::= ID sym_lparen PARAM_IN sym_rparen 
            {
              MethodCallNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		IdentifierNode v = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int param_inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int param_inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ParamInNode param_in = (ParamInNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new MethodCallNode(param_in, v, v.getLine(), v.getColumn());                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METHOD_CALL",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PARAM_IN ::= EXP sym_comma PARAM_IN 
            {
              ParamInNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode exp = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int param_inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int param_inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParamInNode param_in = (ParamInNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ParamInNode(exp, param_in, exp.getLine(), exp.getColumn());                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM_IN",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PARAM_IN ::= EXP 
            {
              ParamInNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode exp = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ParamInNode(exp, null, exp.getLine(), exp.getColumn());                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM_IN",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // PARAM_IN ::= 
            {
              ParamInNode RESULT =null;
		 RESULT = new ParamInNode();                                                                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM_IN",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ASSIG ::= GEST_IDX sym_eq EXP 
            {
              AssigNode RESULT =null;
		int gidxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int gidxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		GestIdxNode gidx = (GestIdxNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ComplexSymbol o = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode exp = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AssigNode(exp, gidx, extractLine(o), extractColumn(o));                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIG",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXP ::= sym_lparen EXP sym_rparen 
            {
              ExpressionNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionNode exp = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ExpressionNode(exp, null, null, null, null, null, null, exp.getLine(), exp.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXP ::= NEG_OP EXP 
            {
              ExpressionNode RESULT =null;
		int neg_opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int neg_opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NegOpNode neg_op = (NegOpNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode exp = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpressionNode(exp, null, null, null, neg_op, null, null, neg_op.getLine(), neg_op.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXP ::= EXP BINARY_OP EXP 
            {
              ExpressionNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode exp1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bin_opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bin_opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BinaryOpNode bin_op = (BinaryOpNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode exp2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpressionNode(exp1, exp2, bin_op, null, null, null, null, extractLine(bin_op), extractColumn(bin_op)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXP ::= SIMPLE_VALUE 
            {
              ExpressionNode RESULT =null;
		int smplleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int smplright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimpleValueNode smpl = (SimpleValueNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpressionNode(null, null, null, smpl, null, null, null, smpl.getLine(), smpl.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SIMPLE_VALUE ::= LITERAL 
            {
              SimpleValueNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LiteralNode l = (LiteralNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SimpleValueNode(null, l, null, null, null, l.getType(), l.getLine(), l.getColumn());    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIMPLE_VALUE",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SIMPLE_VALUE ::= GEST_IDX 
            {
              SimpleValueNode RESULT =null;
		int gidxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int gidxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		GestIdxNode gidx = (GestIdxNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SimpleValueNode(null, null, gidx, null, null, null, extractLine(gidx), extractColumn(gidx));    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIMPLE_VALUE",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SIMPLE_VALUE ::= op_sub SIMPLE_VALUE 
            {
              SimpleValueNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ComplexSymbol o = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int smplleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int smplright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimpleValueNode smpl = (SimpleValueNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SimpleValueNode(null, null, null, null, smpl, null, extractLine(o), extractColumn(o));  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIMPLE_VALUE",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SIMPLE_VALUE ::= INST_EXP 
            {
              SimpleValueNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InstExpNode v = (InstExpNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SimpleValueNode(null, null, null, v, null, null, v.getLine(), v.getColumn());           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIMPLE_VALUE",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // GEST_IDX ::= ID GESTOR 
            {
              GestIdxNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int gestleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int gestright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		GestorNode gest = (GestorNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GestIdxNode(id, gest, extractLine(id), extractColumn(id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GEST_IDX",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // GESTOR ::= GEST_ARRAY 
            {
              GestorNode RESULT =null;
		int gestArrayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int gestArrayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		GestArrayNode gestArray = (GestArrayNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GestorNode(gestArray, null, extractLine(gestArray), extractColumn(gestArray)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GESTOR",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // GESTOR ::= GEST_TUPEL 
            {
              GestorNode RESULT =null;
		int gtupleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int gtupright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		GestTupelNode gtup = (GestTupelNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GestorNode(null, gtup, extractLine(gtup), extractColumn(gtup)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GESTOR",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // GESTOR ::= 
            {
              GestorNode RESULT =null;
		 RESULT = new GestorNode(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GESTOR",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // GEST_ARRAY ::= sym_lbracket EXP sym_rbracket GEST_ARRAY 
            {
              GestArrayNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ComplexSymbol v = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode exp = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int gestArrayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int gestArrayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		GestArrayNode gestArray = (GestArrayNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GestArrayNode(exp, gestArray, extractLine(v), extractColumn(v));          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GEST_ARRAY",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // GEST_ARRAY ::= sym_lbracket EXP sym_rbracket 
            {
              GestArrayNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ComplexSymbol v = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionNode exp = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new GestArrayNode(exp, null, extractLine(v), extractColumn(v));                                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GEST_ARRAY",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // GEST_TUPEL ::= sym_dot ID 
            {
              GestTupelNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ComplexSymbol v = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IdentifierNode id = (IdentifierNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GestTupelNode(id, extractLine(v), extractColumn(v));                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GEST_TUPEL",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LITERAL ::= l_int 
            {
              LiteralNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LiteralWrapper l = (LiteralWrapper)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LiteralNode(Integer.toString((Integer)l.getLiteral()), TypeEnum.INT, l.getLine(), l.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LITERAL ::= l_char 
            {
              LiteralNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LiteralWrapper l = (LiteralWrapper)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LiteralNode((String)l.getLiteral(), TypeEnum.CHAR, l.getLine(), l.getColumn());                   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // LITERAL ::= r_true 
            {
              LiteralNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LiteralWrapper l = (LiteralWrapper)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LiteralNode((String)l.getLiteral(), TypeEnum.BOOL, l.getLine(), l.getColumn());                   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LITERAL ::= r_false 
            {
              LiteralNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LiteralWrapper l = (LiteralWrapper)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LiteralNode((String)l.getLiteral(), TypeEnum.BOOL, l.getLine(), l.getColumn());                   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // LITERAL ::= l_string 
            {
              LiteralNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LiteralWrapper l = (LiteralWrapper)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LiteralNode((String)l.getLiteral(), TypeEnum.STRING, l.getLine(), l.getColumn());                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // BINARY_OP ::= ARIT_OP 
            {
              BinaryOpNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AritOpNode v = (AritOpNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOpNode(v, null, null, v.getLine(), v.getColumn());                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OP",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // BINARY_OP ::= REL_OP 
            {
              BinaryOpNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		RelOpNode v = (RelOpNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOpNode(null, v, null, v.getLine(), v.getColumn());                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OP",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // BINARY_OP ::= LOGIC_OP 
            {
              BinaryOpNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LogicOpNode v = (LogicOpNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOpNode(null, null, v, v.getLine(), v.getColumn());                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OP",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // REL_OP ::= rel_eq 
            {
              RelOpNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol o = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RelOpNode(RelOpType.EQ, extractLine(o), extractColumn(o));                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REL_OP",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // REL_OP ::= rel_neq 
            {
              RelOpNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol o = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RelOpNode(RelOpType.NEQ, extractLine(o), extractColumn(o));                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REL_OP",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // REL_OP ::= rel_lt 
            {
              RelOpNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol o = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RelOpNode(RelOpType.LT, extractLine(o), extractColumn(o));                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REL_OP",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // REL_OP ::= rel_gt 
            {
              RelOpNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol o = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RelOpNode(RelOpType.GT, extractLine(o), extractColumn(o));                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REL_OP",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // REL_OP ::= rel_le 
            {
              RelOpNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol o = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RelOpNode(RelOpType.LE, extractLine(o), extractColumn(o));                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REL_OP",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // REL_OP ::= rel_ge 
            {
              RelOpNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol o = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RelOpNode(RelOpType.GE, extractLine(o), extractColumn(o));                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REL_OP",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // LOGIC_OP ::= r_or 
            {
              LogicOpNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol o = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LogicOpNode(LogicOpType.OR, extractLine(o), extractColumn(o));                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGIC_OP",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // LOGIC_OP ::= r_and 
            {
              LogicOpNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol o = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LogicOpNode(LogicOpType.AND, extractLine(o), extractColumn(o));                         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGIC_OP",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ARIT_OP ::= op_add 
            {
              AritOpNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol o = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AritOpNode(AritOpType.ADD, extractLine(o), extractColumn(o));                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARIT_OP",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ARIT_OP ::= op_sub 
            {
              AritOpNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol o = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AritOpNode(AritOpType.SUB, extractLine(o), extractColumn(o));                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARIT_OP",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ARIT_OP ::= op_mul 
            {
              AritOpNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol o = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AritOpNode(AritOpType.MUL, extractLine(o), extractColumn(o));                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARIT_OP",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ARIT_OP ::= op_div 
            {
              AritOpNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol o = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AritOpNode(AritOpType.DIV, extractLine(o), extractColumn(o));                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARIT_OP",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ARIT_OP ::= op_mod 
            {
              AritOpNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol o = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AritOpNode(AritOpType.MOD, extractLine(o), extractColumn(o));                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARIT_OP",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NEG_OP ::= r_not 
            {
              NegOpNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol n = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NegOpNode(extractLine(n), extractColumn(n));                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NEG_OP",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // SPECIAL_OP ::= op_increment 
            {
              SpecialOpNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol o = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SpecialOpNode(SpecialOpType.INCREMENT, extractLine(o), extractColumn(o));               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SPECIAL_OP",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // SPECIAL_OP ::= op_decrement 
            {
              SpecialOpNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol o = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SpecialOpNode(SpecialOpType.DECREMENT, extractLine(o), extractColumn(o));               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SPECIAL_OP",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // MAIN ::= r_main sym_lparen sym_rparen sym_lcbracket SENTENCE_LIST sym_rcbracket 
            {
              MainNode RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ComplexSymbol m = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SentenceListNode sl = (SentenceListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new MainNode(sl, extractLine(m), extractColumn(m));                                         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ID ::= identifier 
            {
              IdentifierNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LiteralWrapper i = (LiteralWrapper)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IdentifierNode((String)i.getLiteral(), i.getLine(), i.getColumn());                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
