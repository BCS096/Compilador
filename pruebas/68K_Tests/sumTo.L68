00020490 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 26/01/2023 11:06:59

00000000                             1          INCLUDE  library/MACRO.X68
00000000                             2              OPT     $1000
00000000                             3              OPT     MEX
00000000                             4  
00000000                             5  ;A AND B, VALUE IN D1
00000000                             6  CLRH:       MACRO
00000000                             7              SWAP    \1
00000000                             8              CLR.W   \1
00000000                             9              SWAP    \1
00000000                            10              ENDM
00000000                            11  
00000000                            12  ANDM:       MACRO
00000000                            13              MOVE.L  D0, -(A7)
00000000                            14              MOVE.L  \1, D0
00000000                            15              MOVE.L  \2, D1
00000000                            16              AND.L   D0, D1
00000000                            17              MOVE.L  (A7)+, D0
00000000                            18              ENDM
00000000                            19  
00000000                            20  ;A OR B, VALUE IN D1
00000000                            21  
00000000                            22  ORM:        MACRO
00000000                            23              MOVE.L  D0, -(A7)
00000000                            24              MOVE.L  \1, D0
00000000                            25              MOVE.L  \2, D1
00000000                            26              OR.L    D0, D1
00000000                            27              MOVE.L  (A7)+, D0
00000000                            28              ENDM
00000000                            29              
00000000                            30  ;NOT A, VALUE IN D1
00000000                            31  
00000000                            32  NOTM:       MACRO
00000000                            33              MOVE.L  \1, D1
00000000                            34              NOT.L   D1
00000000                            35              ENDM
00000000                            36              
00000000                            37  ;A + B, VALUE IN D1
00000000                            38  
00000000                            39  ADDM:       MACRO
00000000                            40              MOVE.L  D0, -(A7)
00000000                            41              MOVE.L  \1, D0
00000000                            42              MOVE.L  \2, D1
00000000                            43              ADD.L   D0, D1
00000000                            44              MOVE.L  (A7)+, D0
00000000                            45              ENDM
00000000                            46              
00000000                            47  ;A - B, VALUE IN D1
00000000                            48  
00000000                            49  SUBM:       MACRO
00000000                            50              MOVE.L  D0, -(A7)
00000000                            51              MOVE.L  \1, D0
00000000                            52              MOVE.L  \2, D1
00000000                            53              SUB.L   D1, D0
00000000                            54              MOVE.L  D0, D1
00000000                            55              ENDM
00000000                            56              
00000000                            57  ;A / B, VALUE IN D1
00000000                            58  
00000000                            59  DIVM:       MACRO
00000000                            60              MOVE.L  D0, -(A7)
00000000                            61              MOVE.L  \1, D1
00000000                            62              MOVE.L  \2, D0
00000000                            63              DIVS    D1, D0                  ; 68K ONLY SUPPORTS WORD DIVISION
00000000                            64              MOVE.L  D0, D1
00000000                            65              MOVE.L  (A7)+, D0
00000000                            66              ENDM
00000000                            67              
00000000                            68  ;A MOD B, VALUE IN D1
00000000                            69  
00000000                            70  MODM:       MACRO
00000000                            71              MOVE.L  D0, -(A7)
00000000                            72              MOVE.L  \1, D1
00000000                            73              MOVE.L  \2, D0
00000000                            74              DIVU    D1, D0
00000000                            75              CLR.W   D0                      ; CLEAR LOWER PART
00000000                            76              SWAP    D0                      ; MODULUS TO LOWER (UPPER IS CLEAR)
00000000                            77              MOVE.L  D0, D1
00000000                            78              MOVE.L  (A7)+, D0
00000000                            79              ENDM
00000000                            80              
00000000                            81  ;A * B, VALUE IN D1
00000000                            82  
00000000                            83  MULTM:      MACRO
00000000                            84              MOVE.L  D0, -(A7)
00000000                            85              MOVE.L  \1, D0
00000000                            86              MOVE.L  \2, D1
00000000                            87              MULU    D0, D1
00000000                            88              MOVE.L  (A7)+, D0
00000000                            89              ENDM
00000000                            90              
00000000                            91  ;-A, VALUE IN D1
00000000                            92  
00000000                            93  NEGM:       MACRO
00000000                            94              MOVE.L  \1, D1
00000000                            95              NEG.L   D1
00000000                            96              ENDM
00000000                            97              
00000000                            98  
00000000                            99  
00000000                           100  
00000000                           101  
00000000                           102  
00000000                           103  
00000000                           104  
00000000                           105  
00000000                           106  
00000000                           107  -------------------- end include --------------------
00000000                           108          INCLUDE  library/CONST.X68
00000000                           109  
00000000  =00001000                110  MINIT   EQU $1000
00000000                           111  
00000000                           112  ;INSTRUCTION TYPE CONSTANTS (AS ENUMERATED IN THEIR ENUM)
00000000                           113  ;-----------------------------------------------------------
00000000  =00000000                114  CLONE   EQU 0
00000000  =00000001                115  ADD     EQU 1
00000000  =00000002                116  SUB     EQU 2
00000000  =00000003                117  MUL     EQU 3
00000000  =00000004                118  DIV     EQU 4
00000000  =00000005                119  MOD     EQU 5
00000000  =00000006                120  NEG     EQU 6
00000000  =00000007                121  INCR    EQU 7
00000000  =00000008                122  DECR    EQU 8
00000000  =00000009                123  AND     EQU 9
00000000  =0000000A                124  OR      EQU 10
00000000  =0000000B                125  NOT     EQU 11
00000000  =0000000C                126  EXP     EQU 12
00000000  =0000000D                127  ASSIG   EQU 13
00000000  =0000000E                128  SKIP    EQU 14
00000000  =0000000F                129  GOTO    EQU 15
00000000  =00000010                130  LT      EQU 16
00000000  =00000011                131  LE      EQU 17
00000000  =00000012                132  GT      EQU 18
00000000  =00000013                133  GE      EQU 19
00000000  =00000014                134  EQ      EQU 20
00000000  =00000015                135  NEQ     EQU 21
00000000  =00000016                136  INIT    EQU 22
00000000  =00000017                137  CALL    EQU 23
00000000  =00000018                138  RETURN  EQU 24
00000000  =00000019                139  SIMPLE  EQU 25
00000000  =0000001A                140  COMPLEX EQU 26
00000000  =0000001B                141  READ    EQU 27
00000000  =0000001C                142  PRINT   EQU 28
00000000  =0000001D                143  PRINTLN EQU 29
00000000                           144  ;------------------------------------------------------------------------------
00000000                           145  
00000000                           146  
00000000                           147  ; --- DYNAMIC MEMORY CONSTANTS ------------------------------------------------
00000000                           148  
00000000  =00000400                149  DMMBSIZE    EQU     1024                    ; BLOCK SIZE (BYTES). POWER OF TWO
00000000  =00000080                150  DMMBNUM     EQU     128                     ; NUMBER OF BLOCKS
00000000  =00000000                151  DMMSYSID    EQU     0                       ; SYSTEM OWNER ID (MUST BE 0)
00000000  =FFFFFFFF                152  DMMPRCID    EQU     -1                      ; -1 SO WE CAN USE 0
00000000  =000001F6                153  PARSPACE    EQU     DMMBSIZE/2-10           ; TEMPORARELY HALF PARAMETERS
00000000  =0000020A                154  VARSPACE    EQU     DMMBSIZE-PARSPACE       ; WE SUBSTRACT PARAMETER SPACE AND
00000000                           155                                              ; OTHER VALUES (RETURN, BP, DISP)
00000000                           156  
00000000                           157  
00000000                           158  ; --- TP CONSTANTS ------------------------------------------------------------
00000000                           159  
00000000  =0000000A                160  VARSIZE     EQU     10
00000000                           161  
00000000                           162  ; USED FOR OFFSET PURPOUSES, AS GETTING THE CORRECT VALUE WHEN CHECKING THE TP 
00000000                           163  
00000000                           164  DISP        DS.L    10                      ; DISP allows 10 as max profundity ([0-9])
00000028                           165  
00000028                           166  
00000028                           167  
00000028                           168  
00000028                           169  
00000028                           170  
00000028                           171  
00000028                           172  -------------------- end include --------------------
00000028                           173          INCLUDE  library/VAR.X68
00000028                           174  ; --- DYNAMIC MEMORY VARIABLES ------------------------------------------------
00000028                           175  
00000400                           176              ORG     (*+DMMBSIZE-1)&-DMMBSIZE    ; ALIGN TO DMMBSIZE
00000400                           177  DMMDATA     DS.B    DMMBSIZE*DMMBNUM            ; DYNAMIC MEMORY ALLOCATION SPACE
00020400                           178              DS.W    0                           ; JUST IN CASE (SIZE IS POW OF TWO)
00020400                           179  
00020400                           180  
00020400                           181  
00020400                           182  
00020400                           183  
00020400                           184  
00020400                           185  -------------------- end include --------------------
00020400                           186  ;-----------------------------------------------------------
00020400                           187  ;-----------------------------------------------------------
00020400                           188  ; Initial program lines, main                               
00020400                           189  ;-----------------------------------------------------------
00020400                           190  ; Labels to memory space reserved for variables:            
00020400                           191  ;-----------------------------------------------------------
00020400                           192  Variable1        DS.L 1
00020404                           193  Variable2        DS.L 1
00020408                           194  Variable3        DS.L 1
0002040C                           195  Variable4        DS.L 1
00020410                           196  Variable5        DS.L 1
00020414                           197  Variable6        DS.L 1
00020418                           198  Variable7        DS.L 1
0002041C                           199  Variable8        DS.L 1
00020420                           200  Variable9        DS.L 1
00020424                           201  Variable10        DS.L 1
00020428                           202  Variable11        DS.L 1
0002042C                           203  Variable12        DS.L 1
00020430                           204  Variable13        DS.L 1
00020434= 49 6E 74 72 6F 64 ...    205  Variable14        DC.B 'Introduce un numero entre 0 y 9: ',0
00020456                           206  Variable15        DS.L 1
0002045A                           207  Variable16        DS.L 1
0002045E                           208  Variable17        DS.L 1
00020462                           209  Variable18        DS.L 1
00020466= 4C 61 20 73 75 6D ...    210  Variable19        DC.B 'La suma de 1 hasta tu numero es: ',0
00020488                           211  Variable20        DS.L 1
0002048C                           212  Variable21        DS.L 1
00020490                           213  ;-----------------------------------------------------------
00020490                           214          DS.W 0
00020490                           215  ;-----------------------------------------------------------
00020490                           216  globals:
00020490                           217  ; Instruction of type: SKIP
00020490                           218  ;, Store in -> 0
00020490                           219  
00020490  4EF9 00020548            220          JMP main ; Declared all globals
00020496                           221  Label0:
00020496                           222  ; Instruction of type: INIT
00020496                           223  ;, Store in -> 0
00020496                           224  
00020496  41F8 0000                225          LEA DISP, A0
0002049A  2F28 0008                226          MOVE.L 8(A0), -(A7)
0002049E  2F0E                     227          MOVE.L A6, -(A7)
000204A0  2C4F                     228          MOVE.L A7, A6 ;BP = SP
000204A2  2F4E 0008                229          MOVE.L A6, 8(A7) ; DISP(prof) = BP
000204A6  9FFC 0000000A            230          SUB.L #VARSIZE, A7 ; SP changed to assign Variable Space
000204AC                           231  ; Instruction of type: CLONE
000204AC                           232  ;Operator 1 -> 0, Store in -> 1
000204AC                           233  
000204AC  7000                     234          MOVE.L #0, D0 ; Load variable
000204AE                           235  ; Instruction of type: CLONE
000204AE                           236  ;Operator 1 -> 0, Store in -> 2
000204AE                           237  
000204AE  206E 0004                238          MOVE.L 4(A6), A0 ; A0 contains parameter @
000204B2  2080                     239          MOVE.L D0, (A0) ; Store local parameter
000204B4                           240  ; Instruction of type: CLONE
000204B4                           241  ;Operator 1 -> 0, Store in -> 3
000204B4                           242  
000204B4  7001                     243          MOVE.L #1, D0 ; Load variable
000204B6  206E 0008                244          MOVE.L 8(A6), A0 ; A0 contains parameter @
000204BA  2080                     245          MOVE.L D0, (A0) ; Store local parameter
000204BC                           246  ; Instruction of type: CLONE
000204BC                           247  ;Operator 1 -> 0, Store in -> 4
000204BC                           248  
000204BC  206E 000C                249          MOVE.L 12(A6), A0 ; A0 contains parameter @
000204C0  2080                     250          MOVE.L D0, (A0) ; Store local parameter
000204C2                           251  ; Instruction of type: SKIP
000204C2                           252  ;, Store in -> 0
000204C2                           253  
000204C2                           254  Label1:
000204C2                           255  ; Instruction of type: IFLE
000204C2                           256  ;Operator 1 -> 0, Operator 2 -> ReferenceOp(ref: 0), Store in -> 0
000204C2                           257  
000204C2  B081                     258          CMP.L D1, D0
000204C4  6F00 0010                259          BLE Label2
000204C8                           260  ; Instruction of type: CLONE
000204C8                           261  ;Operator 1 -> 0, Store in -> 7
000204C8                           262  
000204C8  7000                     263          MOVE.L #0, D0 ; Load variable
000204CA  206E 0006                264          MOVE.L 6(A6), A0 ; A0 contains parameter @
000204CE  2080                     265          MOVE.L D0, (A0) ; Store local parameter
000204D0                           266  ; Instruction of type: GOTO
000204D0                           267  ;, Store in -> 0
000204D0                           268  
000204D0  4EF9 000204DE            269          JMP Label3
000204D6                           270  ; Instruction of type: SKIP
000204D6                           271  ;, Store in -> 0
000204D6                           272  
000204D6                           273  Label2:
000204D6                           274  ; Instruction of type: CLONE
000204D6                           275  ;Operator 1 -> 0, Store in -> 7
000204D6                           276  
000204D6  7001                     277          MOVE.L #1, D0 ; Load variable
000204D8  206E 0006                278          MOVE.L 6(A6), A0 ; A0 contains parameter @
000204DC  2080                     279          MOVE.L D0, (A0) ; Store local parameter
000204DE                           280  ; Instruction of type: SKIP
000204DE                           281  ;, Store in -> 0
000204DE                           282  
000204DE                           283  Label3:
000204DE                           284  ; Instruction of type: IFEQ
000204DE                           285  ;Operator 1 -> 7, Operator 2 -> LiteralOp(value: 0), Store in -> 0
000204DE                           286  
000204DE  206E 0006                287          MOVE.L 6(A6), A0 ; A0 contains store address
000204E2  2040                     288          MOVE.L D0, A0
000204E4  2010                     289          MOVE.L (A0), D0 ; Get parameter
000204E6  7200                     290          MOVE.L #0, D1 ; Load variable
000204E8  B081                     291          CMP.L D1, D0
000204EA  6700 004E                292          BEQ Label4
000204EE                           293  ; Instruction of type: ADD
000204EE                           294  ;Operator 1 -> 0, Operator 2 -> ReferenceOp(ref: 0), Store in -> 11
000204EE                           295  
000204EE                           296m         ADDM D0, D1
000204EE  2F00                     297m             MOVE.L  D0, -(A7)
000204F0  2000                     298m             MOVE.L  D0, D0
000204F2  2201                     299m             MOVE.L  D1, D1
000204F4  D280                     300m             ADD.L   D0, D1
000204F6  201F                     301m             MOVE.L  (A7)+, D0
000204F8                           302m             ENDM
000204F8  206E 0028                303          MOVE.L 40(A6), A0 ; A0 contains parameter @
000204FC  2081                     304          MOVE.L D1, (A0) ; Store local parameter
000204FE                           305  ; Instruction of type: CLONE
000204FE                           306  ;Operator 1 -> 11, Store in -> 8
000204FE                           307  
000204FE  206E 0028                308          MOVE.L 40(A6), A0 ; A0 contains store address
00020502  2040                     309          MOVE.L D0, A0
00020504  2010                     310          MOVE.L (A0), D0 ; Get parameter
00020506  206E 001C                311          MOVE.L 28(A6), A0 ; A0 contains parameter @
0002050A  2080                     312          MOVE.L D0, (A0) ; Store local parameter
0002050C                           313  ; Instruction of type: ADD
0002050C                           314  ;Operator 1 -> 4, Operator 2 -> LiteralOp(value: 1), Store in -> 12
0002050C                           315  
0002050C  206E 000C                316          MOVE.L 12(A6), A0 ; A0 contains store address
00020510  2040                     317          MOVE.L D0, A0
00020512  2010                     318          MOVE.L (A0), D0 ; Get parameter
00020514  7201                     319          MOVE.L #1, D1 ; Load variable
00020516                           320m         ADDM D0, D1
00020516  2F00                     321m             MOVE.L  D0, -(A7)
00020518  2000                     322m             MOVE.L  D0, D0
0002051A  2201                     323m             MOVE.L  D1, D1
0002051C  D280                     324m             ADD.L   D0, D1
0002051E  201F                     325m             MOVE.L  (A7)+, D0
00020520                           326m             ENDM
00020520  206E 002C                327          MOVE.L 44(A6), A0 ; A0 contains parameter @
00020524  2081                     328          MOVE.L D1, (A0) ; Store local parameter
00020526                           329  ; Instruction of type: CLONE
00020526                           330  ;Operator 1 -> 12, Store in -> 4
00020526                           331  
00020526  206E 002C                332          MOVE.L 44(A6), A0 ; A0 contains store address
0002052A  2040                     333          MOVE.L D0, A0
0002052C  2010                     334          MOVE.L (A0), D0 ; Get parameter
0002052E  206E 000C                335          MOVE.L 12(A6), A0 ; A0 contains parameter @
00020532  2080                     336          MOVE.L D0, (A0) ; Store local parameter
00020534                           337  ; Instruction of type: GOTO
00020534                           338  ;, Store in -> 0
00020534                           339  
00020534  4EF9 000204C2            340          JMP Label1
0002053A                           341  ; Instruction of type: SKIP
0002053A                           342  ;, Store in -> 0
0002053A                           343  
0002053A                           344  Label4:
0002053A                           345  ; Instruction of type: RETURN
0002053A                           346  ;Operator 1 -> 0, Store in -> 0
0002053A                           347  
0002053A  2E4E                     348          MOVE.L A6, A7 ; SP = BP, return to state before PMB
0002053C  2C5F                     349          MOVE.L (A7)+, A6 ; BP = old BP
0002053E  41F8 0000                350          LEA DISP, A0 ; A0 = @DISP
00020542  215F 0008                351          MOVE.L (A7)+, 8(A0) ; DISP[prof] = old value
00020546  4E75                     352          RTS ; Return
00020548                           353  ; Instruction of type: CALL
00020548                           354  ;Operator 1 -> 0
00020548                           355  
00020548                           356  main:                                                       
00020548  2C4F                     357          MOVE.L A7, A6
0002054A                           358  ; Instruction of type: CLONE
0002054A                           359  ;Operator 1 -> 0, Store in -> 14
0002054A                           360  
0002054A= 49 6E 74 72 6F 64 ...    361  Variable0        DC.B 'Introduce un numero entre 0 y 9: ', 0 ; Inmediate string
0002056C  41F9 0002054A            362          LEA Variable0, A0
00020572  2008                     363          MOVE.L A0, D0 ; Load variable
00020574  206E 0680                364          MOVE.L 1664(A6), A0 ; A0 contains parameter @
00020578  2080                     365          MOVE.L D0, (A0) ; Store local parameter
0002057A                           366  ; Instruction of type: PRINT
0002057A                           367  ;Operator 1 -> 0
0002057A                           368  
0002057A  7003                     369          MOVE.L #3, D0 ; Prepare display
0002057C  4E4F                     370          TRAP #15
0002057E                           371   ; Expect screen visualization
0002057E                           372  ; Instruction of type: READ
0002057E                           373  ;, Store in -> 15
0002057E                           374  
0002057E  7005                     375          MOVE.L #5, D0 ; Prepare read
00020580  4E4F                     376          TRAP #15 ; Expect input
00020582  C2BC 000000FF            377          AND.L #$00FF, D1 ; Mask upper word (we read char = 2 bytes)
00020588  206E 001C                378          MOVE.L 28(A6), A0 ; A0 contains parameter @
0002058C  2081                     379          MOVE.L D1, (A0) ; Store local parameter
0002058E                           380  ; Instruction of type: CLONE
0002058E                           381  ;Operator 1 -> 0, Store in -> 16
0002058E                           382  
0002058E  7030                     383          MOVE.L #48, D0 ; Load variable
00020590  206E 003C                384          MOVE.L 60(A6), A0 ; A0 contains parameter @
00020594  2080                     385          MOVE.L D0, (A0) ; Store local parameter
00020596                           386  ; Instruction of type: SUB
00020596                           387  ;Operator 1 -> 15, Operator 2 -> ReferenceOp(ref: 0), Store in -> 17
00020596                           388  
00020596  206E 001C                389          MOVE.L 28(A6), A0 ; A0 contains store address
0002059A  2040                     390          MOVE.L D0, A0
0002059C  2010                     391          MOVE.L (A0), D0 ; Get parameter
0002059E                           392m         SUBM D0, D1
0002059E  2F00                     393m             MOVE.L  D0, -(A7)
000205A0  2000                     394m             MOVE.L  D0, D0
000205A2  2201                     395m             MOVE.L  D1, D1
000205A4  9081                     396m             SUB.L   D1, D0
000205A6  2200                     397m             MOVE.L  D0, D1
000205A8                           398m             ENDM
000205A8  206E 0040                399          MOVE.L 64(A6), A0 ; A0 contains parameter @
000205AC  2081                     400          MOVE.L D1, (A0) ; Store local parameter
000205AE                           401  ; Instruction of type: CLONE
000205AE                           402  ;Operator 1 -> 17, Store in -> 18
000205AE                           403  
000205AE  206E 0040                404          MOVE.L 64(A6), A0 ; A0 contains store address
000205B2  2040                     405          MOVE.L D0, A0
000205B4  2010                     406          MOVE.L (A0), D0 ; Get parameter
000205B6  206E 0044                407          MOVE.L 68(A6), A0 ; A0 contains parameter @
000205BA  2080                     408          MOVE.L D0, (A0) ; Store local parameter
000205BC                           409  ; Instruction of type: CLONE
000205BC                           410  ;Operator 1 -> 0, Store in -> 19
000205BC                           411  
000205BC                           412  ; Instruction of type: SIMPLEPARAM
000205BC                           413  ;, Store in -> 0
000205BC                           414  
000205BC  206E 0034                415          MOVE.L 52(A6), A0 ; A0 contains store address
000205C0  2040                     416          MOVE.L D0, A0
000205C2  2010                     417          MOVE.L (A0), D0 ; Get parameter
000205C4  2F00                     418          MOVE.L D0, -(A7)
000205C6                           419  ; Instruction of type: CALL
000205C6                           420  ;Operator 1 -> 0, Store in -> 21
000205C6                           421  
000205C6  4EB9 00020496            422          JSR Label0 ; GOTO Label0
000205CC  206E 0050                423          MOVE.L 80(A6), A0 ; A0 contains parameter @
000205D0  2085                     424          MOVE.L D5, (A0) ; Store local parameter
000205D2  2E4E                     425          MOVE.L A6, A7
000205D4                           426  ; Instruction of type: PRINTLN
000205D4                           427  ;Operator 1 -> 21
000205D4                           428  
000205D4  206E 0050                429          MOVE.L 80(A6), A0 ; A0 contains store address
000205D8  2041                     430          MOVE.L D1, A0
000205DA  2210                     431          MOVE.L (A0), D1 ; Get parameter
000205DC  7003                     432          MOVE.L #3, D0 ; Prepare display
000205DE  4E4F                     433          TRAP #15
000205E0                           434   ; Expect screen visualization
000205E0  103C 000B                435          MOVE.B #11, D0 ; Next line prepare
000205E4  223C 000000FF            436          MOVE.L #$00FF, D1 ; Request current coordinates
000205EA  4E4F                     437          TRAP #15 ; Get them in D1.L (HIGH=COL, LOW = ROW)
000205EC  C2BC 000000FF            438          AND.L #$00FF, D1 ; We want always column = 0
000205F2  5201                     439          ADDQ.B #1, D1 ; We increment the current row by 1
000205F4  4E4F                     440          TRAP #15 ; Set new coordinates (next line ready)
000205F6                           441  ; Instruction of type: RETURN
000205F6                           442  ;Operator 1 -> 0
000205F6                           443  
000205F6  FFFF FFFF                444          SIMHALT
000205FA                           445          END globals

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADD                 1
ADDM                1E8
AND                 9
ANDM                5A
ASSIG               D
CALL                17
CLONE               0
CLRH                0
COMPLEX             1A
DECR                8
DISP                0
DIV                 4
DIVM                32D
DMMBNUM             80
DMMBSIZE            400
DMMDATA             400
DMMPRCID            FFFFFFFF
DMMSYSID            0
EQ                  14
EXP                 C
GE                  13
GLOBALS             20490
GOTO                F
GT                  12
INCR                7
INIT                16
LABEL0              20496
LABEL1              204C2
LABEL2              204D6
LABEL3              204DE
LABEL4              2053A
LE                  11
LT                  10
MAIN                20548
MINIT               1000
MOD                 5
MODM                420
MUL                 3
MULTM               571
NEG                 6
NEGM                615
NEQ                 15
NOT                 B
NOTM                1A2
OR                  A
ORM                 FE
PARSPACE            1F6
PRINT               1C
PRINTLN             1D
READ                1B
RETURN              18
SIMPLE              19
SKIP                E
SUB                 2
SUBM                28C
VARIABLE0           2054A
VARIABLE1           20400
VARIABLE10          20424
VARIABLE11          20428
VARIABLE12          2042C
VARIABLE13          20430
VARIABLE14          20434
VARIABLE15          20456
VARIABLE16          2045A
VARIABLE17          2045E
VARIABLE18          20462
VARIABLE19          20466
VARIABLE2           20404
VARIABLE20          20488
VARIABLE21          2048C
VARIABLE3           20408
VARIABLE4           2040C
VARIABLE5           20410
VARIABLE6           20414
VARIABLE7           20418
VARIABLE8           2041C
VARIABLE9           20420
VARSIZE             A
VARSPACE            20A
